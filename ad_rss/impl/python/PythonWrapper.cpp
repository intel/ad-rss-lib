/*
 * ----------------- BEGIN LICENSE BLOCK ---------------------------------
 *
 * Copyright (c) 2019 Intel Corporation
 *
 * SPDX-License-Identifier: LGPL-2.1-only
 *
 * ----------------- END LICENSE BLOCK -----------------------------------
 */

// This file has been generated by Py++.
// clang-format off

#include <boost/python.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>

#include "ad_rss/state/RssStateValidInputRange.hpp"

#include "ad_rss/state/LateralResponse.hpp"

#include "ad_rss/state/RssState.hpp"

#include "ad_rss/state/LongitudinalResponse.hpp"

#include "ad_rss/state/RssStateVectorValidInputRange.hpp"

#include "ad_rss/state/LateralRssState.hpp"

#include "ad_rss/state/LongitudinalResponseValidInputRange.hpp"

#include "ad_rss/state/ProperResponseValidInputRange.hpp"

#include "ad_rss/state/LongitudinalRssStateValidInputRange.hpp"

#include "ad_rss/state/RssStateInformation.hpp"

#include "ad_rss/state/LateralResponseValidInputRange.hpp"

#include "ad_rss/state/RssStateVector.hpp"

#include "ad_rss/state/RssStateSnapshotValidInputRange.hpp"

#include "ad_rss/state/LongitudinalRssState.hpp"

#include "ad_rss/state/RssStateInformationValidInputRange.hpp"

#include "ad_rss/state/RssStateEvaluatorValidInputRange.hpp"

#include "ad_rss/state/ProperResponse.hpp"

#include "ad_rss/state/RssStateEvaluator.hpp"

#include "ad_rss/state/RssStateSnapshot.hpp"

#include "ad_rss/state/LateralRssStateValidInputRange.hpp"

#include "ad_rss/world/LaneSegmentId.hpp"

#include "ad_rss/world/LaneDrivingDirectionValidInputRange.hpp"

#include "ad_rss/world/SceneVector.hpp"

#include "ad_rss/world/WorldModel.hpp"

#include "ad_rss/world/ObjectType.hpp"

#include "ad_rss/world/WorldModelValidInputRange.hpp"

#include "ad_rss/world/ObjectTypeValidInputRange.hpp"

#include "ad_rss/world/LaneSegment.hpp"

#include "ad_rss/world/RoadSegment.hpp"

#include "ad_rss/world/LongitudinalRssAccelerationValues.hpp"

#include "ad_rss/world/SceneVectorValidInputRange.hpp"

#include "ad_rss/world/AccelerationRestriction.hpp"

#include "ad_rss/world/OccupiedRegionVectorValidInputRange.hpp"

#include "ad_rss/world/OccupiedRegion.hpp"

#include "ad_rss/world/LaneSegmentType.hpp"

#include "ad_rss/world/RoadAreaValidInputRange.hpp"

#include "ad_rss/world/OccupiedRegionValidInputRange.hpp"

#include "ad_rss/world/LaneSegmentValidInputRange.hpp"

#include "ad_rss/world/RssDynamics.hpp"

#include "ad_rss/world/AccelerationRestrictionValidInputRange.hpp"

#include "ad_rss/world/LateralRssAccelerationValues.hpp"

#include "ad_rss/world/ObjectIdVectorValidInputRange.hpp"

#include "ad_rss/world/OccupiedRegionVector.hpp"

#include "ad_rss/world/RssDynamicsValidInputRange.hpp"

#include "ad_rss/world/LaneSegmentTypeValidInputRange.hpp"

#include "ad_rss/world/RoadSegmentValidInputRange.hpp"

#include "ad_rss/world/LaneDrivingDirection.hpp"

#include "ad_rss/world/ObjectId.hpp"

#include "ad_rss/world/SceneValidInputRange.hpp"

#include "ad_rss/world/Object.hpp"

#include "ad_rss/world/ObjectValidInputRange.hpp"

#include "ad_rss/world/RoadArea.hpp"

#include "ad_rss/world/Velocity.hpp"

#include "ad_rss/world/VelocityValidInputRange.hpp"

#include "ad_rss/world/LateralRssAccelerationValuesValidInputRange.hpp"

#include "ad_rss/world/Scene.hpp"

#include "ad_rss/world/ObjectIdVector.hpp"

#include "ad_rss/world/LongitudinalRssAccelerationValuesValidInputRange.hpp"

#include "ad_rss/physics/Distance.hpp"

#include "ad_rss/physics/MetricRangeValidInputRange.hpp"

#include "ad_rss/physics/SpeedRangeValidInputRange.hpp"

#include "ad_rss/physics/AccelerationRangeValidInputRange.hpp"

#include "ad_rss/physics/DistanceSquaredValidInputRange.hpp"

#include "ad_rss/physics/ParametricValueValidInputRange.hpp"

#include "ad_rss/physics/MetricRange.hpp"

#include "ad_rss/physics/DistanceSquared.hpp"

#include "ad_rss/physics/SpeedSquaredValidInputRange.hpp"

#include "ad_rss/physics/TimeIndex.hpp"

#include "ad_rss/physics/AccelerationRange.hpp"

#include "ad_rss/physics/DistanceValidInputRange.hpp"

#include "ad_rss/physics/ParametricRange.hpp"

#include "ad_rss/physics/ParametricValue.hpp"

#include "ad_rss/physics/CoordinateSystemAxisValidInputRange.hpp"

#include "ad_rss/physics/AccelerationValidInputRange.hpp"

#include "ad_rss/physics/Speed.hpp"

#include "ad_rss/physics/DurationValidInputRange.hpp"

#include "ad_rss/physics/Duration.hpp"

#include "ad_rss/physics/SpeedSquared.hpp"

#include "ad_rss/physics/SpeedValidInputRange.hpp"

#include "ad_rss/physics/Acceleration.hpp"

#include "ad_rss/physics/DurationSquaredValidInputRange.hpp"

#include "ad_rss/physics/ParametricRangeValidInputRange.hpp"

#include "ad_rss/physics/DurationSquared.hpp"

#include "ad_rss/physics/SpeedRange.hpp"

#include "ad_rss/physics/CoordinateSystemAxis.hpp"

#include "ad_rss/situation/LongitudinalRelativePositionValidInputRange.hpp"

#include "ad_rss/situation/SituationVectorValidInputRange.hpp"

#include "ad_rss/situation/LateralRelativePositionValidInputRange.hpp"

#include "ad_rss/situation/VelocityRange.hpp"

#include "ad_rss/situation/RelativePosition.hpp"

#include "ad_rss/situation/VehicleStateValidInputRange.hpp"

#include "ad_rss/situation/RelativePositionValidInputRange.hpp"

#include "ad_rss/situation/SituationTypeValidInputRange.hpp"

#include "ad_rss/situation/LongitudinalRelativePosition.hpp"

#include "ad_rss/situation/LateralRelativePosition.hpp"

#include "ad_rss/situation/SituationSnapshotValidInputRange.hpp"

#include "ad_rss/situation/VehicleState.hpp"

#include "ad_rss/situation/SituationId.hpp"

#include "ad_rss/situation/SituationType.hpp"

#include "ad_rss/situation/Situation.hpp"

#include "ad_rss/situation/SituationVector.hpp"

#include "ad_rss/situation/VelocityRangeValidInputRange.hpp"

#include "ad_rss/situation/SituationSnapshot.hpp"

#include "ad_rss/situation/SituationValidInputRange.hpp"

#include "ad_rss/core/RssSituationExtraction.hpp"

#include "ad_rss/core/RssResponseTransformation.hpp"

#include "ad_rss/core/RssSituationChecking.hpp"

#include "ad_rss/core/RssCheck.hpp"

#include "ad_rss/core/RssResponseResolving.hpp"

#include "ad_rss/physics/Operations.hpp"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(libad_rss_python){
    bp::enum_< ad_rss::physics::CoordinateSystemAxis>("CoordinateSystemAxis")
        .value("Longitudinal", ad_rss::physics::CoordinateSystemAxis::Longitudinal)
        .value("Lateral", ad_rss::physics::CoordinateSystemAxis::Lateral)
        .export_values()
        ;

    bp::enum_< ad_rss::world::LaneDrivingDirection>("LaneDrivingDirection")
        .value("Bidirectional", ad_rss::world::LaneDrivingDirection::Bidirectional)
        .value("Positive", ad_rss::world::LaneDrivingDirection::Positive)
        .value("Negative", ad_rss::world::LaneDrivingDirection::Negative)
        .export_values()
        ;

    bp::enum_< ad_rss::world::LaneSegmentType>("LaneSegmentType")
        .value("Normal", ad_rss::world::LaneSegmentType::Normal)
        .value("Intersection", ad_rss::world::LaneSegmentType::Intersection)
        .export_values()
        ;

    bp::enum_< ad_rss::situation::LateralRelativePosition>("LateralRelativePosition")
        .value("AtLeft", ad_rss::situation::LateralRelativePosition::AtLeft)
        .value("OverlapLeft", ad_rss::situation::LateralRelativePosition::OverlapLeft)
        .value("Overlap", ad_rss::situation::LateralRelativePosition::Overlap)
        .value("OverlapRight", ad_rss::situation::LateralRelativePosition::OverlapRight)
        .value("AtRight", ad_rss::situation::LateralRelativePosition::AtRight)
        .export_values()
        ;

    bp::enum_< ad_rss::state::LateralResponse>("LateralResponse")
        .value("None", ad_rss::state::LateralResponse::None)
        .value("BrakeMin", ad_rss::state::LateralResponse::BrakeMin)
        .export_values()
        ;

    bp::enum_< ad_rss::situation::LongitudinalRelativePosition>("LongitudinalRelativePosition")
        .value("InFront", ad_rss::situation::LongitudinalRelativePosition::InFront)
        .value("OverlapFront", ad_rss::situation::LongitudinalRelativePosition::OverlapFront)
        .value("Overlap", ad_rss::situation::LongitudinalRelativePosition::Overlap)
        .value("OverlapBack", ad_rss::situation::LongitudinalRelativePosition::OverlapBack)
        .value("AtBack", ad_rss::situation::LongitudinalRelativePosition::AtBack)
        .export_values()
        ;

    bp::enum_< ad_rss::state::LongitudinalResponse>("LongitudinalResponse")
        .value("None", ad_rss::state::LongitudinalResponse::None)
        .value("BrakeMinCorrect", ad_rss::state::LongitudinalResponse::BrakeMinCorrect)
        .value("BrakeMin", ad_rss::state::LongitudinalResponse::BrakeMin)
        .export_values()
        ;

    bp::enum_< ad_rss::world::ObjectType>("ObjectType")
        .value("Invalid", ad_rss::world::ObjectType::Invalid)
        .value("EgoVehicle", ad_rss::world::ObjectType::EgoVehicle)
        .value("OtherVehicle", ad_rss::world::ObjectType::OtherVehicle)
        .value("ArtificialObject", ad_rss::world::ObjectType::ArtificialObject)
        .export_values()
        ;

    bp::enum_< ad_rss::state::RssStateEvaluator>("RssStateEvaluator")
        .value("None", ad_rss::state::RssStateEvaluator::None)
        .value("LongitudinalDistanceOppositeDirectionEgoCorrectLane", ad_rss::state::RssStateEvaluator::LongitudinalDistanceOppositeDirectionEgoCorrectLane)
        .value("LongitudinalDistanceOppositeDirection", ad_rss::state::RssStateEvaluator::LongitudinalDistanceOppositeDirection)
        .value("LongitudinalDistanceSameDirectionEgoFront", ad_rss::state::RssStateEvaluator::LongitudinalDistanceSameDirectionEgoFront)
        .value("LongitudinalDistanceSameDirectionOtherInFront", ad_rss::state::RssStateEvaluator::LongitudinalDistanceSameDirectionOtherInFront)
        .value("LateralDistance", ad_rss::state::RssStateEvaluator::LateralDistance)
        .value("IntersectionOtherPriorityEgoAbleToStop", ad_rss::state::RssStateEvaluator::IntersectionOtherPriorityEgoAbleToStop)
        .value("IntersectionEgoPriorityOtherAbleToStop", ad_rss::state::RssStateEvaluator::IntersectionEgoPriorityOtherAbleToStop)
        .value("IntersectionEgoInFront", ad_rss::state::RssStateEvaluator::IntersectionEgoInFront)
        .value("IntersectionOtherInFront", ad_rss::state::RssStateEvaluator::IntersectionOtherInFront)
        .value("IntersectionOverlap", ad_rss::state::RssStateEvaluator::IntersectionOverlap)
        .export_values()
        ;

    bp::enum_< ad_rss::situation::SituationType>("SituationType")
        .value("NotRelevant", ad_rss::situation::SituationType::NotRelevant)
        .value("SameDirection", ad_rss::situation::SituationType::SameDirection)
        .value("OppositeDirection", ad_rss::situation::SituationType::OppositeDirection)
        .value("IntersectionEgoHasPriority", ad_rss::situation::SituationType::IntersectionEgoHasPriority)
        .value("IntersectionObjectHasPriority", ad_rss::situation::SituationType::IntersectionObjectHasPriority)
        .value("IntersectionSamePriority", ad_rss::situation::SituationType::IntersectionSamePriority)
        .export_values()
        ;

    bp::class_< ad_rss::core::RssCheck, boost::noncopyable >( "RssCheck", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "calculateAccelerationRestriction"
            , (bool ( ::ad_rss::core::RssCheck::* )( ::ad_rss::world::WorldModel const &,::ad_rss::world::AccelerationRestriction & ))( &::ad_rss::core::RssCheck::calculateAccelerationRestriction )
            , ( bp::arg("worldModel"), bp::arg("accelerationRestriction") ) );

    bp::class_< ad_rss::core::RssResponseResolving >( "RssResponseResolving", bp::init< >() )    
        .def( 
            "provideProperResponse"
            , (bool ( ::ad_rss::core::RssResponseResolving::* )( ::ad_rss::state::RssStateSnapshot const &,::ad_rss::state::ProperResponse & ))( &::ad_rss::core::RssResponseResolving::provideProperResponse )
            , ( bp::arg("currentStateSnapshot"), bp::arg("response") ) );

    bp::class_< ad_rss::core::RssSituationChecking, boost::noncopyable >( "RssSituationChecking", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "checkSituations"
            , (bool ( ::ad_rss::core::RssSituationChecking::* )( ::ad_rss::situation::SituationSnapshot const &,::ad_rss::state::RssStateSnapshot & ))( &::ad_rss::core::RssSituationChecking::checkSituations )
            , ( bp::arg("situationSnapshot"), bp::arg("rssStateSnapshot") ) );

    bp::class_< ad_rss::core::RssSituationExtraction, boost::noncopyable >( "RssSituationExtraction", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "extractSituations"
            , (bool ( ::ad_rss::core::RssSituationExtraction::* )( ::ad_rss::world::WorldModel const &,::ad_rss::situation::SituationSnapshot & ))( &::ad_rss::core::RssSituationExtraction::extractSituations )
            , ( bp::arg("worldModel"), bp::arg("situationSnapshot") ) );

    { //::ad_rss::physics::Acceleration
        typedef bp::class_< ad_rss::physics::Acceleration > Acceleration_exposer_t;
        Acceleration_exposer_t Acceleration_exposer = Acceleration_exposer_t( "Acceleration", bp::init< >() );
        bp::scope Acceleration_scope( Acceleration_exposer );
        Acceleration_exposer.def( bp::init< double >(( bp::arg("iAcceleration") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::Acceleration >();
        Acceleration_exposer.def( bp::init< ad_rss::physics::Acceleration const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::Acceleration::ensureValid
        
            typedef void ( ::ad_rss::physics::Acceleration::*ensureValid_function_type)(  ) const;
            
            Acceleration_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::Acceleration::ensureValid ) );
        
        }
        { //::ad_rss::physics::Acceleration::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::Acceleration::*ensureValidNonZero_function_type)(  ) const;
            
            Acceleration_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::Acceleration::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::Acceleration::getMax
        
            typedef ::ad_rss::physics::Acceleration ( *getMax_function_type )(  );
            
            Acceleration_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::Acceleration::getMax ) );
        
        }
        { //::ad_rss::physics::Acceleration::getMin
        
            typedef ::ad_rss::physics::Acceleration ( *getMin_function_type )(  );
            
            Acceleration_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::Acceleration::getMin ) );
        
        }
        { //::ad_rss::physics::Acceleration::getPrecision
        
            typedef ::ad_rss::physics::Acceleration ( *getPrecision_function_type )(  );
            
            Acceleration_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::Acceleration::getPrecision ) );
        
        }
        Acceleration_exposer.def( "__float__", &ad_rss::physics::Acceleration::operator double  );
        Acceleration_exposer.def( bp::self != bp::self );
        Acceleration_exposer.def( bp::self * bp::other< double >() );
        Acceleration_exposer.def( bp::self + bp::self );
        Acceleration_exposer.def( bp::self += bp::self );
        Acceleration_exposer.def( bp::self - bp::self );
        Acceleration_exposer.def( -bp::self );
        Acceleration_exposer.def( bp::self -= bp::self );
        Acceleration_exposer.def( bp::self / bp::other< double >() );
        Acceleration_exposer.def( bp::self / bp::self );
        Acceleration_exposer.def( bp::self < bp::self );
        Acceleration_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::Acceleration::operator=
        
            typedef ::ad_rss::physics::Acceleration & ( ::ad_rss::physics::Acceleration::*assign_function_type)( ::ad_rss::physics::Acceleration const & ) ;
            
            Acceleration_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::Acceleration::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Acceleration_exposer.def( bp::self == bp::self );
        Acceleration_exposer.def( bp::self > bp::self );
        Acceleration_exposer.def( bp::self >= bp::self );
        Acceleration_exposer.def_readonly( "cMaxValue", ad_rss::physics::Acceleration::cMaxValue );
        Acceleration_exposer.def_readonly( "cMinValue", ad_rss::physics::Acceleration::cMinValue );
        Acceleration_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::Acceleration::cPrecisionValue );
        Acceleration_exposer.staticmethod( "getMax" );
        Acceleration_exposer.staticmethod( "getMin" );
        Acceleration_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::Acceleration::isValid]
        
            typedef bool ( ::ad_rss::physics::Acceleration::*fget)(  ) const;
            
            Acceleration_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::Acceleration::isValid )
                , "get property, built on top of \"bool ad_rss::physics::Acceleration::isValid() const [member function]\"" );
        
        }
        Acceleration_exposer.def( bp::other< double >() * bp::self );
        Acceleration_exposer.def( bp::self * bp::other< ad_rss::physics::Duration >() );
    }

    bp::implicitly_convertible< ad_rss::physics::Acceleration, double >();

    { //::ad_rss::physics::AccelerationRange
        typedef bp::class_< ad_rss::physics::AccelerationRange > AccelerationRange_exposer_t;
        AccelerationRange_exposer_t AccelerationRange_exposer = AccelerationRange_exposer_t( "AccelerationRange", bp::init< >() );
        bp::scope AccelerationRange_scope( AccelerationRange_exposer );
        AccelerationRange_exposer.def( bp::init< ad_rss::physics::AccelerationRange const & >(( bp::arg("other") )) );
        AccelerationRange_exposer.def( bp::self != bp::self );
        { //::ad_rss::physics::AccelerationRange::operator=
        
            typedef ::ad_rss::physics::AccelerationRange & ( ::ad_rss::physics::AccelerationRange::*assign_function_type)( ::ad_rss::physics::AccelerationRange const & ) ;
            
            AccelerationRange_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::AccelerationRange::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        AccelerationRange_exposer.def( bp::self == bp::self );
        AccelerationRange_exposer.def_readwrite( "maximum", &ad_rss::physics::AccelerationRange::maximum );
        AccelerationRange_exposer.def_readwrite( "minimum", &ad_rss::physics::AccelerationRange::minimum );
    }

    { //::ad_rss::physics::Distance
        typedef bp::class_< ad_rss::physics::Distance > Distance_exposer_t;
        Distance_exposer_t Distance_exposer = Distance_exposer_t( "Distance", bp::init< >() );
        bp::scope Distance_scope( Distance_exposer );
        Distance_exposer.def( bp::init< double >(( bp::arg("iDistance") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::Distance >();
        Distance_exposer.def( bp::init< ad_rss::physics::Distance const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::Distance::ensureValid
        
            typedef void ( ::ad_rss::physics::Distance::*ensureValid_function_type)(  ) const;
            
            Distance_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::Distance::ensureValid ) );
        
        }
        { //::ad_rss::physics::Distance::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::Distance::*ensureValidNonZero_function_type)(  ) const;
            
            Distance_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::Distance::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::Distance::getMax
        
            typedef ::ad_rss::physics::Distance ( *getMax_function_type )(  );
            
            Distance_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::Distance::getMax ) );
        
        }
        { //::ad_rss::physics::Distance::getMin
        
            typedef ::ad_rss::physics::Distance ( *getMin_function_type )(  );
            
            Distance_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::Distance::getMin ) );
        
        }
        { //::ad_rss::physics::Distance::getPrecision
        
            typedef ::ad_rss::physics::Distance ( *getPrecision_function_type )(  );
            
            Distance_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::Distance::getPrecision ) );
        
        }
        Distance_exposer.def( "__float__", &ad_rss::physics::Distance::operator double  );
        Distance_exposer.def( bp::self != bp::self );
        Distance_exposer.def( bp::self * bp::self );
        Distance_exposer.def( bp::self * bp::other< double >() );
        Distance_exposer.def( bp::self + bp::self );
        Distance_exposer.def( bp::self += bp::self );
        Distance_exposer.def( bp::self - bp::self );
        Distance_exposer.def( -bp::self );
        Distance_exposer.def( bp::self -= bp::self );
        Distance_exposer.def( bp::self / bp::other< double >() );
        Distance_exposer.def( bp::self / bp::self );
        Distance_exposer.def( bp::self < bp::self );
        Distance_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::Distance::operator=
        
            typedef ::ad_rss::physics::Distance & ( ::ad_rss::physics::Distance::*assign_function_type)( ::ad_rss::physics::Distance const & ) ;
            
            Distance_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::Distance::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Distance_exposer.def( bp::self == bp::self );
        Distance_exposer.def( bp::self > bp::self );
        Distance_exposer.def( bp::self >= bp::self );
        Distance_exposer.def_readonly( "cMaxValue", ad_rss::physics::Distance::cMaxValue );
        Distance_exposer.def_readonly( "cMinValue", ad_rss::physics::Distance::cMinValue );
        Distance_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::Distance::cPrecisionValue );
        Distance_exposer.staticmethod( "getMax" );
        Distance_exposer.staticmethod( "getMin" );
        Distance_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::Distance::isValid]
        
            typedef bool ( ::ad_rss::physics::Distance::*fget)(  ) const;
            
            Distance_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::Distance::isValid )
                , "get property, built on top of \"bool ad_rss::physics::Distance::isValid() const [member function]\"" );
        
        }
        Distance_exposer.def( bp::other< double >() * bp::self );
        Distance_exposer.def( bp::self * bp::other< ad_rss::physics::ParametricValue >() );
        Distance_exposer.def( bp::self / bp::other< ad_rss::physics::Speed >() );
        Distance_exposer.def( bp::self / bp::other< ad_rss::physics::Acceleration >() );
    }

    bp::implicitly_convertible< ad_rss::physics::Distance, double >();

    { //::ad_rss::physics::DistanceSquared
        typedef bp::class_< ad_rss::physics::DistanceSquared > DistanceSquared_exposer_t;
        DistanceSquared_exposer_t DistanceSquared_exposer = DistanceSquared_exposer_t( "DistanceSquared", bp::init< >() );
        bp::scope DistanceSquared_scope( DistanceSquared_exposer );
        DistanceSquared_exposer.def( bp::init< double >(( bp::arg("iDistanceSquared") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::DistanceSquared >();
        DistanceSquared_exposer.def( bp::init< ad_rss::physics::DistanceSquared const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::DistanceSquared::ensureValid
        
            typedef void ( ::ad_rss::physics::DistanceSquared::*ensureValid_function_type)(  ) const;
            
            DistanceSquared_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::DistanceSquared::ensureValid ) );
        
        }
        { //::ad_rss::physics::DistanceSquared::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::DistanceSquared::*ensureValidNonZero_function_type)(  ) const;
            
            DistanceSquared_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::DistanceSquared::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::DistanceSquared::getMax
        
            typedef ::ad_rss::physics::DistanceSquared ( *getMax_function_type )(  );
            
            DistanceSquared_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::DistanceSquared::getMax ) );
        
        }
        { //::ad_rss::physics::DistanceSquared::getMin
        
            typedef ::ad_rss::physics::DistanceSquared ( *getMin_function_type )(  );
            
            DistanceSquared_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::DistanceSquared::getMin ) );
        
        }
        { //::ad_rss::physics::DistanceSquared::getPrecision
        
            typedef ::ad_rss::physics::DistanceSquared ( *getPrecision_function_type )(  );
            
            DistanceSquared_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::DistanceSquared::getPrecision ) );
        
        }
        DistanceSquared_exposer.def( "__float__", &ad_rss::physics::DistanceSquared::operator double  );
        DistanceSquared_exposer.def( bp::self != bp::self );
        DistanceSquared_exposer.def( bp::self * bp::other< double >() );
        DistanceSquared_exposer.def( bp::self + bp::self );
        DistanceSquared_exposer.def( bp::self += bp::self );
        DistanceSquared_exposer.def( bp::self - bp::self );
        DistanceSquared_exposer.def( -bp::self );
        DistanceSquared_exposer.def( bp::self -= bp::self );
        DistanceSquared_exposer.def( bp::self / bp::other< double >() );
        DistanceSquared_exposer.def( bp::self / bp::self );
        DistanceSquared_exposer.def( bp::self < bp::self );
        DistanceSquared_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::DistanceSquared::operator=
        
            typedef ::ad_rss::physics::DistanceSquared & ( ::ad_rss::physics::DistanceSquared::*assign_function_type)( ::ad_rss::physics::DistanceSquared const & ) ;
            
            DistanceSquared_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::DistanceSquared::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        DistanceSquared_exposer.def( bp::self == bp::self );
        DistanceSquared_exposer.def( bp::self > bp::self );
        DistanceSquared_exposer.def( bp::self >= bp::self );
        DistanceSquared_exposer.def_readonly( "cMaxValue", ad_rss::physics::DistanceSquared::cMaxValue );
        DistanceSquared_exposer.def_readonly( "cMinValue", ad_rss::physics::DistanceSquared::cMinValue );
        DistanceSquared_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::DistanceSquared::cPrecisionValue );
        DistanceSquared_exposer.staticmethod( "getMax" );
        DistanceSquared_exposer.staticmethod( "getMin" );
        DistanceSquared_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::DistanceSquared::isValid]
        
            typedef bool ( ::ad_rss::physics::DistanceSquared::*fget)(  ) const;
            
            DistanceSquared_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::DistanceSquared::isValid )
                , "get property, built on top of \"bool ad_rss::physics::DistanceSquared::isValid() const [member function]\"" );
        
        }
        DistanceSquared_exposer.def( bp::other< double >() * bp::self );
    }

    bp::implicitly_convertible< ad_rss::physics::DistanceSquared, double >();

    { //::ad_rss::physics::Duration
        typedef bp::class_< ad_rss::physics::Duration > Duration_exposer_t;
        Duration_exposer_t Duration_exposer = Duration_exposer_t( "Duration", bp::init< >() );
        bp::scope Duration_scope( Duration_exposer );
        Duration_exposer.def( bp::init< double >(( bp::arg("iDuration") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::Duration >();
        Duration_exposer.def( bp::init< ad_rss::physics::Duration const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::Duration::ensureValid
        
            typedef void ( ::ad_rss::physics::Duration::*ensureValid_function_type)(  ) const;
            
            Duration_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::Duration::ensureValid ) );
        
        }
        { //::ad_rss::physics::Duration::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::Duration::*ensureValidNonZero_function_type)(  ) const;
            
            Duration_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::Duration::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::Duration::getMax
        
            typedef ::ad_rss::physics::Duration ( *getMax_function_type )(  );
            
            Duration_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::Duration::getMax ) );
        
        }
        { //::ad_rss::physics::Duration::getMin
        
            typedef ::ad_rss::physics::Duration ( *getMin_function_type )(  );
            
            Duration_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::Duration::getMin ) );
        
        }
        { //::ad_rss::physics::Duration::getPrecision
        
            typedef ::ad_rss::physics::Duration ( *getPrecision_function_type )(  );
            
            Duration_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::Duration::getPrecision ) );
        
        }
        Duration_exposer.def( "__float__", &ad_rss::physics::Duration::operator double  );
        Duration_exposer.def( bp::self != bp::self );
        Duration_exposer.def( bp::self * bp::self );
        Duration_exposer.def( bp::self * bp::other< double >() );
        Duration_exposer.def( bp::self + bp::self );
        Duration_exposer.def( bp::self += bp::self );
        Duration_exposer.def( bp::self - bp::self );
        Duration_exposer.def( -bp::self );
        Duration_exposer.def( bp::self -= bp::self );
        Duration_exposer.def( bp::self / bp::other< double >() );
        Duration_exposer.def( bp::self / bp::self );
        Duration_exposer.def( bp::self < bp::self );
        Duration_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::Duration::operator=
        
            typedef ::ad_rss::physics::Duration & ( ::ad_rss::physics::Duration::*assign_function_type)( ::ad_rss::physics::Duration const & ) ;
            
            Duration_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::Duration::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Duration_exposer.def( bp::self == bp::self );
        Duration_exposer.def( bp::self > bp::self );
        Duration_exposer.def( bp::self >= bp::self );
        Duration_exposer.def_readonly( "cMaxValue", ad_rss::physics::Duration::cMaxValue );
        Duration_exposer.def_readonly( "cMinValue", ad_rss::physics::Duration::cMinValue );
        Duration_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::Duration::cPrecisionValue );
        Duration_exposer.staticmethod( "getMax" );
        Duration_exposer.staticmethod( "getMin" );
        Duration_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::Duration::isValid]
        
            typedef bool ( ::ad_rss::physics::Duration::*fget)(  ) const;
            
            Duration_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::Duration::isValid )
                , "get property, built on top of \"bool ad_rss::physics::Duration::isValid() const [member function]\"" );
        
        }
        Duration_exposer.def( bp::other< double >() * bp::self );
        Duration_exposer.def( bp::self * bp::other< ad_rss::physics::Acceleration >() );
        Duration_exposer.def( bp::self * bp::other< ad_rss::physics::Speed >() );
    }

    bp::implicitly_convertible< ad_rss::physics::Duration, double >();

    { //::ad_rss::physics::DurationSquared
        typedef bp::class_< ad_rss::physics::DurationSquared > DurationSquared_exposer_t;
        DurationSquared_exposer_t DurationSquared_exposer = DurationSquared_exposer_t( "DurationSquared", bp::init< >() );
        bp::scope DurationSquared_scope( DurationSquared_exposer );
        DurationSquared_exposer.def( bp::init< double >(( bp::arg("iDurationSquared") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::DurationSquared >();
        DurationSquared_exposer.def( bp::init< ad_rss::physics::DurationSquared const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::DurationSquared::ensureValid
        
            typedef void ( ::ad_rss::physics::DurationSquared::*ensureValid_function_type)(  ) const;
            
            DurationSquared_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::DurationSquared::ensureValid ) );
        
        }
        { //::ad_rss::physics::DurationSquared::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::DurationSquared::*ensureValidNonZero_function_type)(  ) const;
            
            DurationSquared_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::DurationSquared::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::DurationSquared::getMax
        
            typedef ::ad_rss::physics::DurationSquared ( *getMax_function_type )(  );
            
            DurationSquared_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::DurationSquared::getMax ) );
        
        }
        { //::ad_rss::physics::DurationSquared::getMin
        
            typedef ::ad_rss::physics::DurationSquared ( *getMin_function_type )(  );
            
            DurationSquared_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::DurationSquared::getMin ) );
        
        }
        { //::ad_rss::physics::DurationSquared::getPrecision
        
            typedef ::ad_rss::physics::DurationSquared ( *getPrecision_function_type )(  );
            
            DurationSquared_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::DurationSquared::getPrecision ) );
        
        }
        DurationSquared_exposer.def( "__float__", &ad_rss::physics::DurationSquared::operator double  );
        DurationSquared_exposer.def( bp::self != bp::self );
        DurationSquared_exposer.def( bp::self * bp::other< double >() );
        DurationSquared_exposer.def( bp::self + bp::self );
        DurationSquared_exposer.def( bp::self += bp::self );
        DurationSquared_exposer.def( bp::self - bp::self );
        DurationSquared_exposer.def( -bp::self );
        DurationSquared_exposer.def( bp::self -= bp::self );
        DurationSquared_exposer.def( bp::self / bp::other< double >() );
        DurationSquared_exposer.def( bp::self / bp::self );
        DurationSquared_exposer.def( bp::self < bp::self );
        DurationSquared_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::DurationSquared::operator=
        
            typedef ::ad_rss::physics::DurationSquared & ( ::ad_rss::physics::DurationSquared::*assign_function_type)( ::ad_rss::physics::DurationSquared const & ) ;
            
            DurationSquared_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::DurationSquared::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        DurationSquared_exposer.def( bp::self == bp::self );
        DurationSquared_exposer.def( bp::self > bp::self );
        DurationSquared_exposer.def( bp::self >= bp::self );
        DurationSquared_exposer.def_readonly( "cMaxValue", ad_rss::physics::DurationSquared::cMaxValue );
        DurationSquared_exposer.def_readonly( "cMinValue", ad_rss::physics::DurationSquared::cMinValue );
        DurationSquared_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::DurationSquared::cPrecisionValue );
        DurationSquared_exposer.staticmethod( "getMax" );
        DurationSquared_exposer.staticmethod( "getMin" );
        DurationSquared_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::DurationSquared::isValid]
        
            typedef bool ( ::ad_rss::physics::DurationSquared::*fget)(  ) const;
            
            DurationSquared_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::DurationSquared::isValid )
                , "get property, built on top of \"bool ad_rss::physics::DurationSquared::isValid() const [member function]\"" );
        
        }
        DurationSquared_exposer.def( bp::other< double >() * bp::self );
    }

    bp::implicitly_convertible< ad_rss::physics::DurationSquared, double >();

    { //::ad_rss::physics::MetricRange
        typedef bp::class_< ad_rss::physics::MetricRange > MetricRange_exposer_t;
        MetricRange_exposer_t MetricRange_exposer = MetricRange_exposer_t( "MetricRange", bp::init< >() );
        bp::scope MetricRange_scope( MetricRange_exposer );
        MetricRange_exposer.def( bp::init< ad_rss::physics::MetricRange const & >(( bp::arg("other") )) );
        MetricRange_exposer.def( bp::self != bp::self );
        { //::ad_rss::physics::MetricRange::operator=
        
            typedef ::ad_rss::physics::MetricRange & ( ::ad_rss::physics::MetricRange::*assign_function_type)( ::ad_rss::physics::MetricRange const & ) ;
            
            MetricRange_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::MetricRange::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MetricRange_exposer.def( bp::self == bp::self );
        MetricRange_exposer.def_readwrite( "maximum", &ad_rss::physics::MetricRange::maximum );
        MetricRange_exposer.def_readwrite( "minimum", &ad_rss::physics::MetricRange::minimum );
    }

    { //::ad_rss::physics::ParametricRange
        typedef bp::class_< ad_rss::physics::ParametricRange > ParametricRange_exposer_t;
        ParametricRange_exposer_t ParametricRange_exposer = ParametricRange_exposer_t( "ParametricRange", bp::init< >() );
        bp::scope ParametricRange_scope( ParametricRange_exposer );
        ParametricRange_exposer.def( bp::init< ad_rss::physics::ParametricRange const & >(( bp::arg("other") )) );
        ParametricRange_exposer.def( bp::self != bp::self );
        { //::ad_rss::physics::ParametricRange::operator=
        
            typedef ::ad_rss::physics::ParametricRange & ( ::ad_rss::physics::ParametricRange::*assign_function_type)( ::ad_rss::physics::ParametricRange const & ) ;
            
            ParametricRange_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::ParametricRange::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ParametricRange_exposer.def( bp::self == bp::self );
        ParametricRange_exposer.def_readwrite( "maximum", &ad_rss::physics::ParametricRange::maximum );
        ParametricRange_exposer.def_readwrite( "minimum", &ad_rss::physics::ParametricRange::minimum );
    }

    { //::ad_rss::physics::ParametricValue
        typedef bp::class_< ad_rss::physics::ParametricValue > ParametricValue_exposer_t;
        ParametricValue_exposer_t ParametricValue_exposer = ParametricValue_exposer_t( "ParametricValue", bp::init< >() );
        bp::scope ParametricValue_scope( ParametricValue_exposer );
        ParametricValue_exposer.def( bp::init< double >(( bp::arg("iParametricValue") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::ParametricValue >();
        ParametricValue_exposer.def( bp::init< ad_rss::physics::ParametricValue const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::ParametricValue::ensureValid
        
            typedef void ( ::ad_rss::physics::ParametricValue::*ensureValid_function_type)(  ) const;
            
            ParametricValue_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::ParametricValue::ensureValid ) );
        
        }
        { //::ad_rss::physics::ParametricValue::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::ParametricValue::*ensureValidNonZero_function_type)(  ) const;
            
            ParametricValue_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::ParametricValue::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::ParametricValue::getMax
        
            typedef ::ad_rss::physics::ParametricValue ( *getMax_function_type )(  );
            
            ParametricValue_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::ParametricValue::getMax ) );
        
        }
        { //::ad_rss::physics::ParametricValue::getMin
        
            typedef ::ad_rss::physics::ParametricValue ( *getMin_function_type )(  );
            
            ParametricValue_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::ParametricValue::getMin ) );
        
        }
        { //::ad_rss::physics::ParametricValue::getPrecision
        
            typedef ::ad_rss::physics::ParametricValue ( *getPrecision_function_type )(  );
            
            ParametricValue_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::ParametricValue::getPrecision ) );
        
        }
        ParametricValue_exposer.def( "__float__", &ad_rss::physics::ParametricValue::operator double  );
        ParametricValue_exposer.def( bp::self != bp::self );
        ParametricValue_exposer.def( bp::self * bp::other< double >() );
        ParametricValue_exposer.def( bp::self + bp::self );
        ParametricValue_exposer.def( bp::self += bp::self );
        ParametricValue_exposer.def( bp::self - bp::self );
        ParametricValue_exposer.def( -bp::self );
        ParametricValue_exposer.def( bp::self -= bp::self );
        ParametricValue_exposer.def( bp::self / bp::other< double >() );
        ParametricValue_exposer.def( bp::self / bp::self );
        ParametricValue_exposer.def( bp::self < bp::self );
        ParametricValue_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::ParametricValue::operator=
        
            typedef ::ad_rss::physics::ParametricValue & ( ::ad_rss::physics::ParametricValue::*assign_function_type)( ::ad_rss::physics::ParametricValue const & ) ;
            
            ParametricValue_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::ParametricValue::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ParametricValue_exposer.def( bp::self == bp::self );
        ParametricValue_exposer.def( bp::self > bp::self );
        ParametricValue_exposer.def( bp::self >= bp::self );
        ParametricValue_exposer.def_readonly( "cMaxValue", ad_rss::physics::ParametricValue::cMaxValue );
        ParametricValue_exposer.def_readonly( "cMinValue", ad_rss::physics::ParametricValue::cMinValue );
        ParametricValue_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::ParametricValue::cPrecisionValue );
        ParametricValue_exposer.staticmethod( "getMax" );
        ParametricValue_exposer.staticmethod( "getMin" );
        ParametricValue_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::ParametricValue::isValid]
        
            typedef bool ( ::ad_rss::physics::ParametricValue::*fget)(  ) const;
            
            ParametricValue_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::ParametricValue::isValid )
                , "get property, built on top of \"bool ad_rss::physics::ParametricValue::isValid() const [member function]\"" );
        
        }
        ParametricValue_exposer.def( bp::other< double >() * bp::self );
        ParametricValue_exposer.def( bp::self * bp::other< ad_rss::physics::Distance >() );
    }

    bp::implicitly_convertible< ad_rss::physics::ParametricValue, double >();

    { //::ad_rss::physics::Speed
        typedef bp::class_< ad_rss::physics::Speed > Speed_exposer_t;
        Speed_exposer_t Speed_exposer = Speed_exposer_t( "Speed", bp::init< >() );
        bp::scope Speed_scope( Speed_exposer );
        Speed_exposer.def( bp::init< double >(( bp::arg("iSpeed") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::Speed >();
        Speed_exposer.def( bp::init< ad_rss::physics::Speed const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::Speed::ensureValid
        
            typedef void ( ::ad_rss::physics::Speed::*ensureValid_function_type)(  ) const;
            
            Speed_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::Speed::ensureValid ) );
        
        }
        { //::ad_rss::physics::Speed::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::Speed::*ensureValidNonZero_function_type)(  ) const;
            
            Speed_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::Speed::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::Speed::getMax
        
            typedef ::ad_rss::physics::Speed ( *getMax_function_type )(  );
            
            Speed_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::Speed::getMax ) );
        
        }
        { //::ad_rss::physics::Speed::getMin
        
            typedef ::ad_rss::physics::Speed ( *getMin_function_type )(  );
            
            Speed_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::Speed::getMin ) );
        
        }
        { //::ad_rss::physics::Speed::getPrecision
        
            typedef ::ad_rss::physics::Speed ( *getPrecision_function_type )(  );
            
            Speed_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::Speed::getPrecision ) );
        
        }
        Speed_exposer.def( "__float__", &ad_rss::physics::Speed::operator double  );
        Speed_exposer.def( bp::self != bp::self );
        Speed_exposer.def( bp::self * bp::self );
        Speed_exposer.def( bp::self * bp::other< double >() );
        Speed_exposer.def( bp::self + bp::self );
        Speed_exposer.def( bp::self += bp::self );
        Speed_exposer.def( bp::self - bp::self );
        Speed_exposer.def( -bp::self );
        Speed_exposer.def( bp::self -= bp::self );
        Speed_exposer.def( bp::self / bp::other< double >() );
        Speed_exposer.def( bp::self / bp::self );
        Speed_exposer.def( bp::self < bp::self );
        Speed_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::Speed::operator=
        
            typedef ::ad_rss::physics::Speed & ( ::ad_rss::physics::Speed::*assign_function_type)( ::ad_rss::physics::Speed const & ) ;
            
            Speed_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::Speed::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Speed_exposer.def( bp::self == bp::self );
        Speed_exposer.def( bp::self > bp::self );
        Speed_exposer.def( bp::self >= bp::self );
        Speed_exposer.def_readonly( "cMaxValue", ad_rss::physics::Speed::cMaxValue );
        Speed_exposer.def_readonly( "cMinValue", ad_rss::physics::Speed::cMinValue );
        Speed_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::Speed::cPrecisionValue );
        Speed_exposer.staticmethod( "getMax" );
        Speed_exposer.staticmethod( "getMin" );
        Speed_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::Speed::isValid]
        
            typedef bool ( ::ad_rss::physics::Speed::*fget)(  ) const;
            
            Speed_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::Speed::isValid )
                , "get property, built on top of \"bool ad_rss::physics::Speed::isValid() const [member function]\"" );
        
        }
        Speed_exposer.def( bp::other< double >() * bp::self );
        Speed_exposer.def( bp::self * bp::other< ad_rss::physics::Duration >() );
        Speed_exposer.def( bp::self / bp::other< ad_rss::physics::Acceleration >() );
    }

    bp::implicitly_convertible< ad_rss::physics::Speed, double >();

    { //::ad_rss::physics::SpeedRange
        typedef bp::class_< ad_rss::physics::SpeedRange > SpeedRange_exposer_t;
        SpeedRange_exposer_t SpeedRange_exposer = SpeedRange_exposer_t( "SpeedRange", bp::init< >() );
        bp::scope SpeedRange_scope( SpeedRange_exposer );
        SpeedRange_exposer.def( bp::init< ad_rss::physics::SpeedRange const & >(( bp::arg("other") )) );
        SpeedRange_exposer.def( bp::self != bp::self );
        { //::ad_rss::physics::SpeedRange::operator=
        
            typedef ::ad_rss::physics::SpeedRange & ( ::ad_rss::physics::SpeedRange::*assign_function_type)( ::ad_rss::physics::SpeedRange const & ) ;
            
            SpeedRange_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::SpeedRange::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SpeedRange_exposer.def( bp::self == bp::self );
        SpeedRange_exposer.def_readwrite( "maximum", &ad_rss::physics::SpeedRange::maximum );
        SpeedRange_exposer.def_readwrite( "minimum", &ad_rss::physics::SpeedRange::minimum );
    }

    { //::ad_rss::physics::SpeedSquared
        typedef bp::class_< ad_rss::physics::SpeedSquared > SpeedSquared_exposer_t;
        SpeedSquared_exposer_t SpeedSquared_exposer = SpeedSquared_exposer_t( "SpeedSquared", bp::init< >() );
        bp::scope SpeedSquared_scope( SpeedSquared_exposer );
        SpeedSquared_exposer.def( bp::init< double >(( bp::arg("iSpeedSquared") )) );
        bp::implicitly_convertible< double const, ad_rss::physics::SpeedSquared >();
        SpeedSquared_exposer.def( bp::init< ad_rss::physics::SpeedSquared const & >(( bp::arg("other") )) );
        { //::ad_rss::physics::SpeedSquared::ensureValid
        
            typedef void ( ::ad_rss::physics::SpeedSquared::*ensureValid_function_type)(  ) const;
            
            SpeedSquared_exposer.def( 
                "ensureValid"
                , ensureValid_function_type( &::ad_rss::physics::SpeedSquared::ensureValid ) );
        
        }
        { //::ad_rss::physics::SpeedSquared::ensureValidNonZero
        
            typedef void ( ::ad_rss::physics::SpeedSquared::*ensureValidNonZero_function_type)(  ) const;
            
            SpeedSquared_exposer.def( 
                "ensureValidNonZero"
                , ensureValidNonZero_function_type( &::ad_rss::physics::SpeedSquared::ensureValidNonZero ) );
        
        }
        { //::ad_rss::physics::SpeedSquared::getMax
        
            typedef ::ad_rss::physics::SpeedSquared ( *getMax_function_type )(  );
            
            SpeedSquared_exposer.def( 
                "getMax"
                , getMax_function_type( &::ad_rss::physics::SpeedSquared::getMax ) );
        
        }
        { //::ad_rss::physics::SpeedSquared::getMin
        
            typedef ::ad_rss::physics::SpeedSquared ( *getMin_function_type )(  );
            
            SpeedSquared_exposer.def( 
                "getMin"
                , getMin_function_type( &::ad_rss::physics::SpeedSquared::getMin ) );
        
        }
        { //::ad_rss::physics::SpeedSquared::getPrecision
        
            typedef ::ad_rss::physics::SpeedSquared ( *getPrecision_function_type )(  );
            
            SpeedSquared_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::ad_rss::physics::SpeedSquared::getPrecision ) );
        
        }
        SpeedSquared_exposer.def( "__float__", &ad_rss::physics::SpeedSquared::operator double  );
        SpeedSquared_exposer.def( bp::self != bp::self );
        SpeedSquared_exposer.def( bp::self * bp::other< double >() );
        SpeedSquared_exposer.def( bp::self + bp::self );
        SpeedSquared_exposer.def( bp::self += bp::self );
        SpeedSquared_exposer.def( bp::self - bp::self );
        SpeedSquared_exposer.def( -bp::self );
        SpeedSquared_exposer.def( bp::self -= bp::self );
        SpeedSquared_exposer.def( bp::self / bp::other< double >() );
        SpeedSquared_exposer.def( bp::self / bp::self );
        SpeedSquared_exposer.def( bp::self < bp::self );
        SpeedSquared_exposer.def( bp::self <= bp::self );
        { //::ad_rss::physics::SpeedSquared::operator=
        
            typedef ::ad_rss::physics::SpeedSquared & ( ::ad_rss::physics::SpeedSquared::*assign_function_type)( ::ad_rss::physics::SpeedSquared const & ) ;
            
            SpeedSquared_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::physics::SpeedSquared::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SpeedSquared_exposer.def( bp::self == bp::self );
        SpeedSquared_exposer.def( bp::self > bp::self );
        SpeedSquared_exposer.def( bp::self >= bp::self );
        SpeedSquared_exposer.def_readonly( "cMaxValue", ad_rss::physics::SpeedSquared::cMaxValue );
        SpeedSquared_exposer.def_readonly( "cMinValue", ad_rss::physics::SpeedSquared::cMinValue );
        SpeedSquared_exposer.def_readonly( "cPrecisionValue", ad_rss::physics::SpeedSquared::cPrecisionValue );
        SpeedSquared_exposer.staticmethod( "getMax" );
        SpeedSquared_exposer.staticmethod( "getMin" );
        SpeedSquared_exposer.staticmethod( "getPrecision" );
        { //property "Valid"[fget=::ad_rss::physics::SpeedSquared::isValid]
        
            typedef bool ( ::ad_rss::physics::SpeedSquared::*fget)(  ) const;
            
            SpeedSquared_exposer.add_property( 
                "Valid"
                , fget( &::ad_rss::physics::SpeedSquared::isValid )
                , "get property, built on top of \"bool ad_rss::physics::SpeedSquared::isValid() const [member function]\"" );
        
        }
        SpeedSquared_exposer.def( bp::other< double >() * bp::self );
        SpeedSquared_exposer.def( bp::self / bp::other< ad_rss::physics::Acceleration >() );
    }

    bp::implicitly_convertible< ad_rss::physics::SpeedSquared, double >();

    { //::ad_rss::situation::RelativePosition
        typedef bp::class_< ad_rss::situation::RelativePosition > RelativePosition_exposer_t;
        RelativePosition_exposer_t RelativePosition_exposer = RelativePosition_exposer_t( "RelativePosition", bp::init< >() );
        bp::scope RelativePosition_scope( RelativePosition_exposer );
        RelativePosition_exposer.def( bp::init< ad_rss::situation::RelativePosition const & >(( bp::arg("other") )) );
        RelativePosition_exposer.def( bp::self != bp::self );
        { //::ad_rss::situation::RelativePosition::operator=
        
            typedef ::ad_rss::situation::RelativePosition & ( ::ad_rss::situation::RelativePosition::*assign_function_type)( ::ad_rss::situation::RelativePosition const & ) ;
            
            RelativePosition_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::situation::RelativePosition::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RelativePosition_exposer.def( bp::self == bp::self );
        RelativePosition_exposer.def_readwrite( "lateralDistance", &ad_rss::situation::RelativePosition::lateralDistance );
        RelativePosition_exposer.def_readwrite( "lateralPosition", &ad_rss::situation::RelativePosition::lateralPosition );
        RelativePosition_exposer.def_readwrite( "longitudinalDistance", &ad_rss::situation::RelativePosition::longitudinalDistance );
        RelativePosition_exposer.def_readwrite( "longitudinalPosition", &ad_rss::situation::RelativePosition::longitudinalPosition );
    }

    { //::ad_rss::situation::Situation
        typedef bp::class_< ad_rss::situation::Situation > Situation_exposer_t;
        Situation_exposer_t Situation_exposer = Situation_exposer_t( "Situation", bp::init< >() );
        bp::scope Situation_scope( Situation_exposer );
        Situation_exposer.def( bp::init< ad_rss::situation::Situation const & >(( bp::arg("other") )) );
        Situation_exposer.def( bp::self != bp::self );
        { //::ad_rss::situation::Situation::operator=
        
            typedef ::ad_rss::situation::Situation & ( ::ad_rss::situation::Situation::*assign_function_type)( ::ad_rss::situation::Situation const & ) ;
            
            Situation_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::situation::Situation::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Situation_exposer.def( bp::self == bp::self );
        Situation_exposer.def_readwrite( "egoVehicleState", &ad_rss::situation::Situation::egoVehicleState );
        Situation_exposer.def_readwrite( "objectId", &ad_rss::situation::Situation::objectId );
        Situation_exposer.def_readwrite( "otherVehicleState", &ad_rss::situation::Situation::otherVehicleState );
        Situation_exposer.def_readwrite( "relativePosition", &ad_rss::situation::Situation::relativePosition );
        Situation_exposer.def_readwrite( "situationId", &ad_rss::situation::Situation::situationId );
        Situation_exposer.def_readwrite( "situationType", &ad_rss::situation::Situation::situationType );
    }

    {
        bp::class_< ad_rss::situation::SituationVector >("SituationVector")
            .def(bp::vector_indexing_suite<ad_rss::situation::SituationVector>() );
    }

    { //::ad_rss::situation::SituationSnapshot
        typedef bp::class_< ad_rss::situation::SituationSnapshot > SituationSnapshot_exposer_t;
        SituationSnapshot_exposer_t SituationSnapshot_exposer = SituationSnapshot_exposer_t( "SituationSnapshot", bp::init< >() );
        bp::scope SituationSnapshot_scope( SituationSnapshot_exposer );
        SituationSnapshot_exposer.def( bp::init< ad_rss::situation::SituationSnapshot const & >(( bp::arg("other") )) );
        SituationSnapshot_exposer.def( bp::self != bp::self );
        { //::ad_rss::situation::SituationSnapshot::operator=
        
            typedef ::ad_rss::situation::SituationSnapshot & ( ::ad_rss::situation::SituationSnapshot::*assign_function_type)( ::ad_rss::situation::SituationSnapshot const & ) ;
            
            SituationSnapshot_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::situation::SituationSnapshot::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SituationSnapshot_exposer.def( bp::self == bp::self );
        SituationSnapshot_exposer.def_readwrite( "situations", &ad_rss::situation::SituationSnapshot::situations );
        SituationSnapshot_exposer.def_readwrite( "timeIndex", &ad_rss::situation::SituationSnapshot::timeIndex );
    }

    { //::ad_rss::situation::VehicleState
        typedef bp::class_< ad_rss::situation::VehicleState > VehicleState_exposer_t;
        VehicleState_exposer_t VehicleState_exposer = VehicleState_exposer_t( "VehicleState", bp::init< >() );
        bp::scope VehicleState_scope( VehicleState_exposer );
        VehicleState_exposer.def( bp::init< ad_rss::situation::VehicleState const & >(( bp::arg("other") )) );
        VehicleState_exposer.def( bp::self != bp::self );
        { //::ad_rss::situation::VehicleState::operator=
        
            typedef ::ad_rss::situation::VehicleState & ( ::ad_rss::situation::VehicleState::*assign_function_type)( ::ad_rss::situation::VehicleState const & ) ;
            
            VehicleState_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::situation::VehicleState::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        VehicleState_exposer.def( bp::self == bp::self );
        VehicleState_exposer.def_readwrite( "distanceToEnterIntersection", &ad_rss::situation::VehicleState::distanceToEnterIntersection );
        VehicleState_exposer.def_readwrite( "distanceToLeaveIntersection", &ad_rss::situation::VehicleState::distanceToLeaveIntersection );
        VehicleState_exposer.def_readwrite( "dynamics", &ad_rss::situation::VehicleState::dynamics );
        VehicleState_exposer.def_readwrite( "hasPriority", &ad_rss::situation::VehicleState::hasPriority );
        VehicleState_exposer.def_readwrite( "isInCorrectLane", &ad_rss::situation::VehicleState::isInCorrectLane );
        VehicleState_exposer.def_readwrite( "velocity", &ad_rss::situation::VehicleState::velocity );
    }

    { //::ad_rss::situation::VelocityRange
        typedef bp::class_< ad_rss::situation::VelocityRange > VelocityRange_exposer_t;
        VelocityRange_exposer_t VelocityRange_exposer = VelocityRange_exposer_t( "VelocityRange", bp::init< >() );
        bp::scope VelocityRange_scope( VelocityRange_exposer );
        VelocityRange_exposer.def( bp::init< ad_rss::situation::VelocityRange const & >(( bp::arg("other") )) );
        VelocityRange_exposer.def( bp::self != bp::self );
        { //::ad_rss::situation::VelocityRange::operator=
        
            typedef ::ad_rss::situation::VelocityRange & ( ::ad_rss::situation::VelocityRange::*assign_function_type)( ::ad_rss::situation::VelocityRange const & ) ;
            
            VelocityRange_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::situation::VelocityRange::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        VelocityRange_exposer.def( bp::self == bp::self );
        VelocityRange_exposer.def_readwrite( "speedLat", &ad_rss::situation::VelocityRange::speedLat );
        VelocityRange_exposer.def_readwrite( "speedLon", &ad_rss::situation::VelocityRange::speedLon );
    }

    { //::ad_rss::state::LateralRssState
        typedef bp::class_< ad_rss::state::LateralRssState > LateralRssState_exposer_t;
        LateralRssState_exposer_t LateralRssState_exposer = LateralRssState_exposer_t( "LateralRssState", bp::init< >() );
        bp::scope LateralRssState_scope( LateralRssState_exposer );
        LateralRssState_exposer.def( bp::init< ad_rss::state::LateralRssState const & >(( bp::arg("other") )) );
        LateralRssState_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::LateralRssState::operator=
        
            typedef ::ad_rss::state::LateralRssState & ( ::ad_rss::state::LateralRssState::*assign_function_type)( ::ad_rss::state::LateralRssState const & ) ;
            
            LateralRssState_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::LateralRssState::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LateralRssState_exposer.def( bp::self == bp::self );
        LateralRssState_exposer.def_readwrite( "isSafe", &ad_rss::state::LateralRssState::isSafe );
        LateralRssState_exposer.def_readwrite( "response", &ad_rss::state::LateralRssState::response );
        LateralRssState_exposer.def_readwrite( "rssStateInformation", &ad_rss::state::LateralRssState::rssStateInformation );
    }

    { //::ad_rss::state::LongitudinalRssState
        typedef bp::class_< ad_rss::state::LongitudinalRssState > LongitudinalRssState_exposer_t;
        LongitudinalRssState_exposer_t LongitudinalRssState_exposer = LongitudinalRssState_exposer_t( "LongitudinalRssState", bp::init< >() );
        bp::scope LongitudinalRssState_scope( LongitudinalRssState_exposer );
        LongitudinalRssState_exposer.def( bp::init< ad_rss::state::LongitudinalRssState const & >(( bp::arg("other") )) );
        LongitudinalRssState_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::LongitudinalRssState::operator=
        
            typedef ::ad_rss::state::LongitudinalRssState & ( ::ad_rss::state::LongitudinalRssState::*assign_function_type)( ::ad_rss::state::LongitudinalRssState const & ) ;
            
            LongitudinalRssState_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::LongitudinalRssState::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LongitudinalRssState_exposer.def( bp::self == bp::self );
        LongitudinalRssState_exposer.def_readwrite( "isSafe", &ad_rss::state::LongitudinalRssState::isSafe );
        LongitudinalRssState_exposer.def_readwrite( "response", &ad_rss::state::LongitudinalRssState::response );
        LongitudinalRssState_exposer.def_readwrite( "rssStateInformation", &ad_rss::state::LongitudinalRssState::rssStateInformation );
    }

    { //::ad_rss::state::ProperResponse
        typedef bp::class_< ad_rss::state::ProperResponse > ProperResponse_exposer_t;
        ProperResponse_exposer_t ProperResponse_exposer = ProperResponse_exposer_t( "ProperResponse", bp::init< >() );
        bp::scope ProperResponse_scope( ProperResponse_exposer );
        ProperResponse_exposer.def( bp::init< ad_rss::state::ProperResponse const & >(( bp::arg("other") )) );
        ProperResponse_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::ProperResponse::operator=
        
            typedef ::ad_rss::state::ProperResponse & ( ::ad_rss::state::ProperResponse::*assign_function_type)( ::ad_rss::state::ProperResponse const & ) ;
            
            ProperResponse_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::ProperResponse::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ProperResponse_exposer.def( bp::self == bp::self );
        ProperResponse_exposer.def_readwrite( "dangerousObjects", &ad_rss::state::ProperResponse::dangerousObjects );
        ProperResponse_exposer.def_readwrite( "isSafe", &ad_rss::state::ProperResponse::isSafe );
        ProperResponse_exposer.def_readwrite( "lateralResponseLeft", &ad_rss::state::ProperResponse::lateralResponseLeft );
        ProperResponse_exposer.def_readwrite( "lateralResponseRight", &ad_rss::state::ProperResponse::lateralResponseRight );
        ProperResponse_exposer.def_readwrite( "longitudinalResponse", &ad_rss::state::ProperResponse::longitudinalResponse );
        ProperResponse_exposer.def_readwrite( "timeIndex", &ad_rss::state::ProperResponse::timeIndex );
    }

    {
        bp::class_< ::ad_rss::world::ObjectIdVector >("ObjectVector")
            .def(bp::vector_indexing_suite<::ad_rss::world::ObjectIdVector>() );
    }

    { //::ad_rss::state::RssState
        typedef bp::class_< ad_rss::state::RssState > RssState_exposer_t;
        RssState_exposer_t RssState_exposer = RssState_exposer_t( "RssState", bp::init< >() );
        bp::scope RssState_scope( RssState_exposer );
        RssState_exposer.def( bp::init< ad_rss::state::RssState const & >(( bp::arg("other") )) );
        RssState_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::RssState::operator=
        
            typedef ::ad_rss::state::RssState & ( ::ad_rss::state::RssState::*assign_function_type)( ::ad_rss::state::RssState const & ) ;
            
            RssState_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::RssState::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RssState_exposer.def( bp::self == bp::self );
        RssState_exposer.def_readwrite( "lateralStateLeft", &ad_rss::state::RssState::lateralStateLeft );
        RssState_exposer.def_readwrite( "lateralStateRight", &ad_rss::state::RssState::lateralStateRight );
        RssState_exposer.def_readwrite( "longitudinalState", &ad_rss::state::RssState::longitudinalState );
        RssState_exposer.def_readwrite( "objectId", &ad_rss::state::RssState::objectId );
        RssState_exposer.def_readwrite( "situationId", &ad_rss::state::RssState::situationId );
    }

    {
        bp::class_< ad_rss::state::RssStateVector >("RssStateVector")
            .def(bp::vector_indexing_suite<ad_rss::state::RssStateVector>() );
    }

    { //::ad_rss::state::RssStateInformation
        typedef bp::class_< ad_rss::state::RssStateInformation > RssStateInformation_exposer_t;
        RssStateInformation_exposer_t RssStateInformation_exposer = RssStateInformation_exposer_t( "RssStateInformation", bp::init< >() );
        bp::scope RssStateInformation_scope( RssStateInformation_exposer );
        RssStateInformation_exposer.def( bp::init< ad_rss::state::RssStateInformation const & >(( bp::arg("other") )) );
        RssStateInformation_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::RssStateInformation::operator=
        
            typedef ::ad_rss::state::RssStateInformation & ( ::ad_rss::state::RssStateInformation::*assign_function_type)( ::ad_rss::state::RssStateInformation const & ) ;
            
            RssStateInformation_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::RssStateInformation::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RssStateInformation_exposer.def( bp::self == bp::self );
        RssStateInformation_exposer.def_readwrite( "currentDistance", &ad_rss::state::RssStateInformation::currentDistance );
        RssStateInformation_exposer.def_readwrite( "evaluator", &ad_rss::state::RssStateInformation::evaluator );
        RssStateInformation_exposer.def_readwrite( "safeDistance", &ad_rss::state::RssStateInformation::safeDistance );
    }

    { //::ad_rss::state::RssStateSnapshot
        typedef bp::class_< ad_rss::state::RssStateSnapshot > RssStateSnapshot_exposer_t;
        RssStateSnapshot_exposer_t RssStateSnapshot_exposer = RssStateSnapshot_exposer_t( "RssStateSnapshot", bp::init< >() );
        bp::scope RssStateSnapshot_scope( RssStateSnapshot_exposer );
        RssStateSnapshot_exposer.def( bp::init< ad_rss::state::RssStateSnapshot const & >(( bp::arg("other") )) );
        RssStateSnapshot_exposer.def( bp::self != bp::self );
        { //::ad_rss::state::RssStateSnapshot::operator=
        
            typedef ::ad_rss::state::RssStateSnapshot & ( ::ad_rss::state::RssStateSnapshot::*assign_function_type)( ::ad_rss::state::RssStateSnapshot const & ) ;
            
            RssStateSnapshot_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::state::RssStateSnapshot::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RssStateSnapshot_exposer.def( bp::self == bp::self );
        RssStateSnapshot_exposer.def_readwrite( "individualResponses", &ad_rss::state::RssStateSnapshot::individualResponses );
        RssStateSnapshot_exposer.def_readwrite( "timeIndex", &ad_rss::state::RssStateSnapshot::timeIndex );
    }

    { //::ad_rss::world::AccelerationRestriction
        typedef bp::class_< ad_rss::world::AccelerationRestriction > AccelerationRestriction_exposer_t;
        AccelerationRestriction_exposer_t AccelerationRestriction_exposer = AccelerationRestriction_exposer_t( "AccelerationRestriction", bp::init< >() );
        bp::scope AccelerationRestriction_scope( AccelerationRestriction_exposer );
        AccelerationRestriction_exposer.def( bp::init< ad_rss::world::AccelerationRestriction const & >(( bp::arg("other") )) );
        AccelerationRestriction_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::AccelerationRestriction::operator=
        
            typedef ::ad_rss::world::AccelerationRestriction & ( ::ad_rss::world::AccelerationRestriction::*assign_function_type)( ::ad_rss::world::AccelerationRestriction const & ) ;
            
            AccelerationRestriction_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::AccelerationRestriction::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        AccelerationRestriction_exposer.def( bp::self == bp::self );
        AccelerationRestriction_exposer.def_readwrite( "lateralLeftRange", &ad_rss::world::AccelerationRestriction::lateralLeftRange );
        AccelerationRestriction_exposer.def_readwrite( "lateralRightRange", &ad_rss::world::AccelerationRestriction::lateralRightRange );
        AccelerationRestriction_exposer.def_readwrite( "longitudinalRange", &ad_rss::world::AccelerationRestriction::longitudinalRange );
        AccelerationRestriction_exposer.def_readwrite( "timeIndex", &ad_rss::world::AccelerationRestriction::timeIndex );
    }

    { //::ad_rss::world::LaneSegment
        typedef bp::class_< ad_rss::world::LaneSegment > LaneSegment_exposer_t;
        LaneSegment_exposer_t LaneSegment_exposer = LaneSegment_exposer_t( "LaneSegment", bp::init< >() );
        bp::scope LaneSegment_scope( LaneSegment_exposer );
        LaneSegment_exposer.def( bp::init< ad_rss::world::LaneSegment const & >(( bp::arg("other") )) );
        LaneSegment_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::LaneSegment::operator=
        
            typedef ::ad_rss::world::LaneSegment & ( ::ad_rss::world::LaneSegment::*assign_function_type)( ::ad_rss::world::LaneSegment const & ) ;
            
            LaneSegment_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::LaneSegment::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LaneSegment_exposer.def( bp::self == bp::self );
        LaneSegment_exposer.def_readwrite( "drivingDirection", &ad_rss::world::LaneSegment::drivingDirection );
        LaneSegment_exposer.def_readwrite( "id", &ad_rss::world::LaneSegment::id );
        LaneSegment_exposer.def_readwrite( "type", &ad_rss::world::LaneSegment::type );
        LaneSegment_exposer.def_readwrite( "width", &ad_rss::world::LaneSegment::width );
        LaneSegment_exposer.def_readwrite( "length", &ad_rss::world::LaneSegment::length );
    }

    {
        bp::class_< ad_rss::world::RoadSegment >("RoadSegment")
            .def(bp::vector_indexing_suite<ad_rss::world::RoadSegment>() );
    }

    {
        bp::class_< ad_rss::world::RoadArea >("RoadArea")
            .def(bp::vector_indexing_suite<ad_rss::world::RoadArea>() );
    }

    { //::ad_rss::world::LateralRssAccelerationValues
        typedef bp::class_< ad_rss::world::LateralRssAccelerationValues > LateralRssAccelerationValues_exposer_t;
        LateralRssAccelerationValues_exposer_t LateralRssAccelerationValues_exposer = LateralRssAccelerationValues_exposer_t( "LateralRssAccelerationValues", bp::init< >() );
        bp::scope LateralRssAccelerationValues_scope( LateralRssAccelerationValues_exposer );
        LateralRssAccelerationValues_exposer.def( bp::init< ad_rss::world::LateralRssAccelerationValues const & >(( bp::arg("other") )) );
        LateralRssAccelerationValues_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::LateralRssAccelerationValues::operator=
        
            typedef ::ad_rss::world::LateralRssAccelerationValues & ( ::ad_rss::world::LateralRssAccelerationValues::*assign_function_type)( ::ad_rss::world::LateralRssAccelerationValues const & ) ;
            
            LateralRssAccelerationValues_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::LateralRssAccelerationValues::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LateralRssAccelerationValues_exposer.def( bp::self == bp::self );
        LateralRssAccelerationValues_exposer.def_readwrite( "accelMax", &ad_rss::world::LateralRssAccelerationValues::accelMax );
        LateralRssAccelerationValues_exposer.def_readwrite( "brakeMin", &ad_rss::world::LateralRssAccelerationValues::brakeMin );
    }

    { //::ad_rss::world::LongitudinalRssAccelerationValues
        typedef bp::class_< ad_rss::world::LongitudinalRssAccelerationValues > LongitudinalRssAccelerationValues_exposer_t;
        LongitudinalRssAccelerationValues_exposer_t LongitudinalRssAccelerationValues_exposer = LongitudinalRssAccelerationValues_exposer_t( "LongitudinalRssAccelerationValues", bp::init< >() );
        bp::scope LongitudinalRssAccelerationValues_scope( LongitudinalRssAccelerationValues_exposer );
        LongitudinalRssAccelerationValues_exposer.def( bp::init< ad_rss::world::LongitudinalRssAccelerationValues const & >(( bp::arg("other") )) );
        LongitudinalRssAccelerationValues_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::LongitudinalRssAccelerationValues::operator=
        
            typedef ::ad_rss::world::LongitudinalRssAccelerationValues & ( ::ad_rss::world::LongitudinalRssAccelerationValues::*assign_function_type)( ::ad_rss::world::LongitudinalRssAccelerationValues const & ) ;
            
            LongitudinalRssAccelerationValues_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::LongitudinalRssAccelerationValues::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LongitudinalRssAccelerationValues_exposer.def( bp::self == bp::self );
        LongitudinalRssAccelerationValues_exposer.def_readwrite( "accelMax", &ad_rss::world::LongitudinalRssAccelerationValues::accelMax );
        LongitudinalRssAccelerationValues_exposer.def_readwrite( "brakeMax", &ad_rss::world::LongitudinalRssAccelerationValues::brakeMax );
        LongitudinalRssAccelerationValues_exposer.def_readwrite( "brakeMin", &ad_rss::world::LongitudinalRssAccelerationValues::brakeMin );
        LongitudinalRssAccelerationValues_exposer.def_readwrite( "brakeMinCorrect", &ad_rss::world::LongitudinalRssAccelerationValues::brakeMinCorrect );
    }

    {
        bp::class_< ad_rss::world::OccupiedRegionVector >("occupiedRegions")
            .def(bp::vector_indexing_suite<ad_rss::world::OccupiedRegionVector>() );
    }

    { //::ad_rss::world::Object
        typedef bp::class_< ad_rss::world::Object > Object_exposer_t;
        Object_exposer_t Object_exposer = Object_exposer_t( "Object", bp::init< >() );
        bp::scope Object_scope( Object_exposer );
        Object_exposer.def( bp::init< ad_rss::world::Object const & >(( bp::arg("other") )) );
        Object_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::Object::operator=
        
            typedef ::ad_rss::world::Object & ( ::ad_rss::world::Object::*assign_function_type)( ::ad_rss::world::Object const & ) ;
            
            Object_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::Object::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Object_exposer.def( bp::self == bp::self );
        Object_exposer.def_readwrite( "objectId", &ad_rss::world::Object::objectId );
        Object_exposer.def_readwrite( "objectType", &ad_rss::world::Object::objectType );
        Object_exposer.def_readwrite( "occupiedRegions", &ad_rss::world::Object::occupiedRegions );
        Object_exposer.def_readwrite( "velocity", &ad_rss::world::Object::velocity );
    }

    { //::ad_rss::world::OccupiedRegion
        typedef bp::class_< ad_rss::world::OccupiedRegion > OccupiedRegion_exposer_t;
        OccupiedRegion_exposer_t OccupiedRegion_exposer = OccupiedRegion_exposer_t( "OccupiedRegion", bp::init< >() );
        bp::scope OccupiedRegion_scope( OccupiedRegion_exposer );
        OccupiedRegion_exposer.def( bp::init< ad_rss::world::OccupiedRegion const & >(( bp::arg("other") )) );
        OccupiedRegion_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::OccupiedRegion::operator=
        
            typedef ::ad_rss::world::OccupiedRegion & ( ::ad_rss::world::OccupiedRegion::*assign_function_type)( ::ad_rss::world::OccupiedRegion const & ) ;
            
            OccupiedRegion_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::OccupiedRegion::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        OccupiedRegion_exposer.def( bp::self == bp::self );
        OccupiedRegion_exposer.def_readwrite( "latRange", &ad_rss::world::OccupiedRegion::latRange );
        OccupiedRegion_exposer.def_readwrite( "lonRange", &ad_rss::world::OccupiedRegion::lonRange );
        OccupiedRegion_exposer.def_readwrite( "segmentId", &ad_rss::world::OccupiedRegion::segmentId );
    }

    { //::ad_rss::world::RssDynamics
        typedef bp::class_< ad_rss::world::RssDynamics > RssDynamics_exposer_t;
        RssDynamics_exposer_t RssDynamics_exposer = RssDynamics_exposer_t( "RssDynamics", bp::init< >() );
        bp::scope RssDynamics_scope( RssDynamics_exposer );
        RssDynamics_exposer.def( bp::init< ad_rss::world::RssDynamics const & >(( bp::arg("other") )) );
        RssDynamics_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::RssDynamics::operator=
        
            typedef ::ad_rss::world::RssDynamics & ( ::ad_rss::world::RssDynamics::*assign_function_type)( ::ad_rss::world::RssDynamics const & ) ;
            
            RssDynamics_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::RssDynamics::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RssDynamics_exposer.def( bp::self == bp::self );
        RssDynamics_exposer.def_readwrite( "alphaLat", &ad_rss::world::RssDynamics::alphaLat );
        RssDynamics_exposer.def_readwrite( "alphaLon", &ad_rss::world::RssDynamics::alphaLon );
        RssDynamics_exposer.def_readwrite( "lateralFluctuationMargin", &ad_rss::world::RssDynamics::lateralFluctuationMargin );
        RssDynamics_exposer.def_readwrite( "responseTime", &ad_rss::world::RssDynamics::responseTime );
    }

    { //::ad_rss::world::Scene
        typedef bp::class_< ad_rss::world::Scene > Scene_exposer_t;
        Scene_exposer_t Scene_exposer = Scene_exposer_t( "Scene", bp::init< >() );
        bp::scope Scene_scope( Scene_exposer );
        Scene_exposer.def( bp::init< ad_rss::world::Scene const & >(( bp::arg("other") )) );
        Scene_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::Scene::operator=
        
            typedef ::ad_rss::world::Scene & ( ::ad_rss::world::Scene::*assign_function_type)( ::ad_rss::world::Scene const & ) ;
            
            Scene_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::Scene::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Scene_exposer.def( bp::self == bp::self );
        Scene_exposer.def_readwrite( "egoVehicle", &ad_rss::world::Scene::egoVehicle );
        Scene_exposer.def_readwrite( "egoVehicleRoad", &ad_rss::world::Scene::egoVehicleRoad );
        Scene_exposer.def_readwrite( "intersectingRoad", &ad_rss::world::Scene::intersectingRoad );
        Scene_exposer.def_readwrite( "object", &ad_rss::world::Scene::object );
        Scene_exposer.def_readwrite( "objectRssDynamics", &ad_rss::world::Scene::objectRssDynamics );
        Scene_exposer.def_readwrite( "situationType", &ad_rss::world::Scene::situationType );
    }

    { //::ad_rss::world::Velocity
        typedef bp::class_< ad_rss::world::Velocity > Velocity_exposer_t;
        Velocity_exposer_t Velocity_exposer = Velocity_exposer_t( "Velocity", bp::init< >() );
        bp::scope Velocity_scope( Velocity_exposer );
        Velocity_exposer.def( bp::init< ad_rss::world::Velocity const & >(( bp::arg("other") )) );
        Velocity_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::Velocity::operator=
        
            typedef ::ad_rss::world::Velocity & ( ::ad_rss::world::Velocity::*assign_function_type)( ::ad_rss::world::Velocity const & ) ;
            
            Velocity_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::Velocity::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Velocity_exposer.def( bp::self == bp::self );
        Velocity_exposer.def_readwrite( "speedLat", &ad_rss::world::Velocity::speedLat );
        Velocity_exposer.def_readwrite( "speedLon", &ad_rss::world::Velocity::speedLon );
    }

    {
        bp::class_< ad_rss::world::SceneVector >("scenes")
            .def(bp::vector_indexing_suite<ad_rss::world::SceneVector>() );
    }

    { //::ad_rss::world::WorldModel
        typedef bp::class_< ad_rss::world::WorldModel > WorldModel_exposer_t;
        WorldModel_exposer_t WorldModel_exposer = WorldModel_exposer_t( "WorldModel", bp::init< >() );
        bp::scope WorldModel_scope( WorldModel_exposer );
        WorldModel_exposer.def( bp::init< ad_rss::world::WorldModel const & >(( bp::arg("other") )) );
        WorldModel_exposer.def( bp::self != bp::self );
        { //::ad_rss::world::WorldModel::operator=
        
            typedef ::ad_rss::world::WorldModel & ( ::ad_rss::world::WorldModel::*assign_function_type)( ::ad_rss::world::WorldModel const & ) ;
            
            WorldModel_exposer.def( 
                "assign"
                , assign_function_type( &::ad_rss::world::WorldModel::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        WorldModel_exposer.def( bp::self == bp::self );
        WorldModel_exposer.def_readwrite( "egoVehicleRssDynamics", &ad_rss::world::WorldModel::egoVehicleRssDynamics );
        WorldModel_exposer.def_readwrite( "scenes", &ad_rss::world::WorldModel::scenes );
        WorldModel_exposer.def_readwrite( "timeIndex", &ad_rss::world::WorldModel::timeIndex );
    }

    bp::class_< std::numeric_limits< ad_rss::physics::Acceleration > >( "numeric_limits_less__ad_rss_scope_physics_scope_Acceleration__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::Acceleration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Acceleration >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::Acceleration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Acceleration >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::Acceleration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Acceleration >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::Distance > >( "numeric_limits_less__ad_rss_scope_physics_scope_Distance__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::Distance (*)(  ))( &::std::numeric_limits< ad_rss::physics::Distance >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::Distance (*)(  ))( &::std::numeric_limits< ad_rss::physics::Distance >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::Distance (*)(  ))( &::std::numeric_limits< ad_rss::physics::Distance >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::DistanceSquared > >( "numeric_limits_less__ad_rss_scope_physics_scope_DistanceSquared__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::DistanceSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DistanceSquared >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::DistanceSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DistanceSquared >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::DistanceSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DistanceSquared >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::Duration > >( "numeric_limits_less__ad_rss_scope_physics_scope_Duration__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::Duration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Duration >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::Duration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Duration >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::Duration (*)(  ))( &::std::numeric_limits< ad_rss::physics::Duration >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::DurationSquared > >( "numeric_limits_less__ad_rss_scope_physics_scope_DurationSquared__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::DurationSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DurationSquared >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::DurationSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DurationSquared >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::DurationSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::DurationSquared >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::ParametricValue > >( "numeric_limits_less__ad_rss_scope_physics_scope_ParametricValue__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::ParametricValue (*)(  ))( &::std::numeric_limits< ad_rss::physics::ParametricValue >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::ParametricValue (*)(  ))( &::std::numeric_limits< ad_rss::physics::ParametricValue >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::ParametricValue (*)(  ))( &::std::numeric_limits< ad_rss::physics::ParametricValue >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::Speed > >( "numeric_limits_less__ad_rss_scope_physics_scope_Speed__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::Speed (*)(  ))( &::std::numeric_limits< ad_rss::physics::Speed >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::Speed (*)(  ))( &::std::numeric_limits< ad_rss::physics::Speed >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::Speed (*)(  ))( &::std::numeric_limits< ad_rss::physics::Speed >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    bp::class_< std::numeric_limits< ad_rss::physics::SpeedSquared > >( "numeric_limits_less__ad_rss_scope_physics_scope_SpeedSquared__greater_" )    
        .def( 
            "epsilon"
            , (::ad_rss::physics::SpeedSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::SpeedSquared >::epsilon ) )    
        .def( 
            "lowest"
            , (::ad_rss::physics::SpeedSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::SpeedSquared >::lowest ) )    
        .def( 
            "max"
            , (::ad_rss::physics::SpeedSquared (*)(  ))( &::std::numeric_limits< ad_rss::physics::SpeedSquared >::max ) )    
        .staticmethod( "epsilon" )    
        .staticmethod( "lowest" )    
        .staticmethod( "max" );

    { //::std::fabs
    
        typedef ::ad_rss::physics::Distance ( *fabs_function_type )( ::ad_rss::physics::Distance const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::Acceleration ( *fabs_function_type )( ::ad_rss::physics::Acceleration const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::Duration ( *fabs_function_type )( ::ad_rss::physics::Duration const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::Speed ( *fabs_function_type )( ::ad_rss::physics::Speed const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::ParametricValue ( *fabs_function_type )( ::ad_rss::physics::ParametricValue const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::DistanceSquared ( *fabs_function_type )( ::ad_rss::physics::DistanceSquared const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::SpeedSquared ( *fabs_function_type )( ::ad_rss::physics::SpeedSquared const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::std::fabs
    
        typedef ::ad_rss::physics::DurationSquared ( *fabs_function_type )( ::ad_rss::physics::DurationSquared const );
        
        bp::def( 
            "fabs"
            , fabs_function_type( &::std::fabs )
            , ( bp::arg("other") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::state::LateralResponse ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::state::RssStateEvaluator ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::state::LongitudinalResponse ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::world::LaneDrivingDirection ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::situation::SituationType ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::world::ObjectType ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::world::LaneSegmentType ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::physics::CoordinateSystemAxis ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::situation::LongitudinalRelativePosition ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::fromString
    
        typedef ::ad_rss::situation::LateralRelativePosition ( *fromString_function_type )( ::std::string const & );
        
        bp::def( 
            "fromString"
            , fromString_function_type( &::fromString )
            , ( bp::arg("str") ) );
    
    }

    { //::std::sqrt
    
        typedef ::ad_rss::physics::Distance ( *sqrt_function_type )( ::ad_rss::physics::DistanceSquared const );
        
        bp::def( 
            "sqrt"
            , sqrt_function_type( &::std::sqrt )
            , ( bp::arg("other") ) );
    
    }

    { //::std::sqrt
    
        typedef ::ad_rss::physics::Speed ( *sqrt_function_type )( ::ad_rss::physics::SpeedSquared const );
        
        bp::def( 
            "sqrt"
            , sqrt_function_type( &::std::sqrt )
            , ( bp::arg("other") ) );
    
    }

    { //::std::sqrt
    
        typedef ::ad_rss::physics::Duration ( *sqrt_function_type )( ::ad_rss::physics::DurationSquared const );
        
        bp::def( 
            "sqrt"
            , sqrt_function_type( &::std::sqrt )
            , ( bp::arg("other") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::state::LateralResponse const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::state::RssStateEvaluator const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::state::LongitudinalResponse const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::world::LaneDrivingDirection const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::situation::SituationType const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::world::ObjectType const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::world::LaneSegmentType const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::physics::CoordinateSystemAxis const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::situation::LongitudinalRelativePosition const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::toString
    
        typedef ::std::string ( *toString_function_type )( ::ad_rss::situation::LateralRelativePosition const );
        
        bp::def( 
            "toString"
            , toString_function_type( &::toString )
            , ( bp::arg("e") ) );
    
    }

    { //::ad_rss::core::RssResponseTransformation::transformProperResponse
    
        typedef bool ( *transformProperResponse_function_type )( ::ad_rss::world::WorldModel const &,::ad_rss::state::ProperResponse const &,::ad_rss::world::AccelerationRestriction & );
        
        bp::def( 
            "transformProperResponse"
            , transformProperResponse_function_type( &::ad_rss::core::RssResponseTransformation::transformProperResponse )
            , ( bp::arg("worldModel"), bp::arg("response"), bp::arg("accelerationRestriction") ) );
    
    }
}

// clang-format on