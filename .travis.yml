# ----------------- BEGIN LICENSE BLOCK ---------------------------------
#
# Copyright (c) 2019 Intel Corporation
#
# SPDX-License-Identifier: LGPL-2.1-only
#
# ----------------- END LICENSE BLOCK -----------------------------------
##

language: cpp
compiler: gcc

os: linux
dist: xenial
sudo: false

env:
  global:
    - BUILDCMD="mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DBUILD_PYTHON_BINDING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest && cp python/libad_rss_python.so ../python/tests && cd ../python/tests && python interface_test.py -qf"

matrix:
  include:

    - env: TEST="Build and Unit Tests (Ubuntu 16.04)"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - lcov
      script:
        - bash .github/.travis/compile.sh release
        - rm -rf build
        - bash .github/.travis/compile.sh debug test
      after_script:
        - bash .github/.travis/code_coverage.sh
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Build and Unit Tests (Ubuntu 14.04)"
      os: linux
      dist: trusty
      addons:
        apt:
          packages:
            - cmake
            - build-essential
      script:
        - bash .github/.travis/compile.sh release
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Build Documentation"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
            - python-pip
      before_install:
        - pip install --user mkdocs>=1.0 markdown-include pymdown-extensions pygments mdx_truly_sane_lists
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DOC=ON
        - make apidoc
        - cd ..
        - export PATH=$PATH:~/.local/lib/python2.7/site-packages/mkdocs/
        - mkdocs build
      after_failures:
        - tail --lines=2000 build.log

    - env: TEST="Check Code Formatting"
      addons:
        apt:
          packages:
            - clang-format-3.9
      script:
        - res=`find -iname *.cpp -o -iname *.hpp | xargs clang-format-3.9 -output-replacements-xml | grep -c "<replacement "`; if [ $res -ne 0 ]; then echo "Your code does not comply to clang-format"; exit 1; fi
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Static Code Analysis"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - lcov
            - clang-tidy
            - clang-3.8
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_STATIC_ANALYSIS=ON
        - make clang-tidy
        - if [ -f clangtidy.yml ]; then echo "Static code analysis with clang-tidy failed. Please run 'make clang-tidy'"; exit 1; fi
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Documentation Deployment"
      if: branch = master AND type != pull_request
      git:
        depth: false
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - lcov
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
            - python-pip
      before_install:
        - pip install --user mkdocs>=1.0 markdown-include pymdown-extensions pygments mdx_truly_sane_lists
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_HARDENING=ON -DBUILD_COVERAGE=ON -DBUILD_DOC=ON -DCMAKE_BUILD_TYPE=Debug
        - make
        - ctest -V
        - make apidoc > apidoc_build.log 2>&1
        - cd ..
        - export PATH=$PATH:~/.local/lib/python2.7/site-packages/mkdocs/
        - mkdocs build
      after_script:
        - bash .github/.travis/code_coverage.sh
        - bash .github/.travis/deploy.sh
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 14.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:trusty tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y -qq install build-essential cmake3 clang git libboost-python-dev"
      script:
        - $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++" && $SH "eval $BUILDCMD"
        - $SH "apt-get -y -qq remove clang && apt-get -y -qq install clang-3.9"
        - $SH "rm -rf build && export CC=/usr/bin/clang-3.9 && export CXX=/usr/bin/clang++-3.9" && $SH "eval $BUILDCMD"
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 16.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:xenial tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y -qq install build-essential cmake clang git libboost-python-dev"
        - $SH "apt-get -y -qq install software-properties-common && add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt-get update"
      script:
        - $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++" && $SH "eval $BUILDCMD"
        - $SH "apt-get -y -qq remove clang && apt-get -y -qq install clang-6.0 g++-6 clang-5.0 g++-7"
        - $SH "rm -rf build && export CC=/usr/bin/gcc-6 && export CXX=/usr/bin/g++-6" && $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/gcc-7 && export CXX=/usr/bin/g++-7" && $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/clang-5.0 && export CXX=/usr/bin/clang++-5.0" && $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/clang-6.0 && export CXX=/usr/bin/clang++-6.0" && $SH "eval $BUILDCMD"
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 18.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:bionic tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y -qq install build-essential cmake clang git libboost-python-dev"
      script:
        - $SH "eval $BUILDCMD"
        - $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++" && $SH "eval $BUILDCMD"
      after_failure:
        - tail --lines=2000 build.log

notifications:
  email: false
