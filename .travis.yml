# ----------------- BEGIN LICENSE BLOCK ---------------------------------
#
# Copyright (c) 2019-2020 Intel Corporation
#
# SPDX-License-Identifier: LGPL-2.1-only
#
# ----------------- END LICENSE BLOCK -----------------------------------
##

language: cpp
dist: xenial
os: linux

git:
  submodules: false

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - build-essential
      - castxml
      - cmake
      - libboost-all-dev
      - libgtest-dev
      - liblapacke-dev
      - libopenblas-dev
      - libproj-dev
      - libpugixml-dev
      - libpython3-dev
      - python
      - python-setuptools
      - python-pip
      - python-wheel
      - python3
      - python3-setuptools
      - python3-pip
      - python3-wheel

before_install:
  - if [ "${EXTRA_PACKAGES}" != "" ]; then sudo apt-get -f -y install ${EXTRA_PACKAGES}; fi
  - pip3 install --user -U colcon-common-extensions
  - pip3 install --user xmlrunner
  - pip2 install --user pygccxml https://bitbucket.org/ompl/pyplusplus/get/1.8.1.zip xmlrunner

env:
  global:
    GTEST_OUTPUT="xml:test_results"
    BUILDCMD="colcon build --event-handlers console_direct+ --executor sequential --packages-up-to ad_rss ad_rss_map_integration --cmake-args -DBUILD_HARDENING=ON -DBUILD_TESTING=ON -DBUILD_PYTHON_BINDING=ON && colcon test --event-handlers console_direct+ --packages-select ad_rss ad_rss_map_integration && colcon test-result"

script:
  - git submodule update --init
  - if [ "${CC0}" == "" ]; then eval ${BUILDCMD}; else eval CC=${CC0} CXX=${CXX0} ${BUILDCMD}; fi
  - if [ "${CC1}" != "" ]; then rm -rf log build install && eval CC=${CC1} CXX=${CXX1} ${BUILDCMD}; fi

after_failure:
   - tail --lines=2000 log/latest_build/events.log
   - tail --lines=2000 log/latest_test/events.log

jobs:
  include:
    - name: "Build and Unit Tests gcc-5 (Ubuntu 16.04)"
      dist: xenial
      compiler: gcc

    - name: "Build and Unit Tests gcc-6 (Ubuntu 16.04)"
      dist: xenial
      compiler: gcc
      env:
        EXTRA_PACKAGES="g++-6"
        CC0=/usr/bin/gcc-6
        CXX0=/usr/bin/g++-6

    - name: "Build and Unit Tests clang-5.0 (Ubuntu 16.04)"
      dist: xenial
      compiler: clang
      env:
        EXTRA_PACKAGES="clang-5.0"
        CC0=/usr/bin/clang-5.0
        CXX0=/usr/bin/clang++-5.0

    - name: "Build and Unit Tests clang-6.0 (Ubuntu 16.04)"
      dist: xenial
      compiler: clang
      env:
        EXTRA_PACKAGES="clang-6.0"
        CC0=/usr/bin/clang-6.0
        CXX0=/usr/bin/clang++-6.0

    - name: "Build and Unit Tests gcc-7 (Ubuntu 18.04)"
      dist: bionic
      compiler: gcc

    - name: "Build and Unit Tests gcc-8 (Ubuntu 18.04)"
      dist: bionic
      compiler: gcc
      env:
        EXTRA_PACKAGES="g++-8"
        CC0=/usr/bin/gcc-8
        CXX0=/usr/bin/g++-8

    - name: "Build and Unit Tests gcc-9 (Ubuntu 18.04)"
      dist: bionic
      compiler: gcc
      env:
        EXTRA_PACKAGES="g++-9 gcc-9 libstdc++-9-dev"
        CC0=/usr/bin/gcc-9
        CXX0=/usr/bin/g++-9

    - name: "Build and Unit Tests clang-7 (Ubuntu 18.04)"
      dist: bionic
      compiler: clang

    - name: "Build and Unit Tests clang-8 (Ubuntu 18.04)"
      dist: bionic
      compiler: clang
      env:
        EXTRA_PACKAGES="clang-8"
        CC0=/usr/bin/clang-8
        CXX0=/usr/bin/clang++-8

    - name: "Check Code Formatting"
      addons:
        apt:
          packages:
            - clang-format-3.9
      before_install:
      script:
        - res=`find -iname *.cpp -o -iname *.hpp | xargs clang-format-3.9 -output-replacements-xml | grep -c "<replacement "`; if [ $res -ne 0 ]; then echo "Your code does not comply to clang-format"; exit 1; fi
      after_failure:

    - name: "Build Documentation"
      env:
        EXTRA_PACKAGES="doxygen graphviz lcov"
      before_script:
        - pip install --user mkdocs>=1.0 markdown-include pymdown-extensions==6.2 pygments mdx_truly_sane_lists
      script:
        - git submodule update --init
        - colcon build --event-handlers console_direct+ --executor sequential --packages-up-to ad_rss ad_rss_map_integration --cmake-args -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_COVERAGE=ON -DBUILD_APIDOC=ON
        - colcon test --event-handlers console_direct+ --packages-select ad_rss ad_rss_map_integration
        - colcon test-result
        - export PATH=$PATH:~/.local/lib/python2.7/site-packages/mkdocs/
        - mkdocs build
      after_script:
        - bash .github/.travis/code_coverage.sh
        - bash .github/.travis/deploy.sh false

    - name: "Documentation Deployment"
      if: branch = master AND type != pull_request
      env:
        EXTRA_PACKAGES="doxygen graphviz lcov"
      before_script:
        - pip install --user mkdocs>=1.0 markdown-include pymdown-extensions==6.2 pygments mdx_truly_sane_lists
      script:
        - git submodule update --init
        - colcon build --event-handlers console_direct+ --executor sequential --packages-up-to ad_rss ad_rss_map_integration --cmake-args -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_COVERAGE=ON -DBUILD_APIDOC=ON
        - colcon test --event-handlers console_direct+ --packages-select ad_rss ad_rss_map_integration
        - colcon test-result
        - export PATH=$PATH:~/.local/lib/python2.7/site-packages/mkdocs/
        - mkdocs build
      after_script:
        - bash .github/.travis/code_coverage.sh
        - bash .github/.travis/deploy.sh true

notifications:
  email: false
