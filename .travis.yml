# ----------------- BEGIN LICENSE BLOCK ---------------------------------
#
# Copyright (c) 2019 Intel Corporation
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#    OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGE.
#
# ----------------- END LICENSE BLOCK -----------------------------------
##

language: cpp
compiler: gcc

os: linux
dist: xenial
sudo: false

matrix:
  include:

    - env: TEST="Build and Unit Tests"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - lcov
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_HARDENING=ON -DBUILD_COVERAGE=ON
        - make
        - ctest -V
        - cd ..
      after_script:
        - lcov -q -c -i -d build -b . --no-external -o initialCov.info
        - lcov -q -r initialCov.info "*CMake*CompilerId*" -o initialCov.info
        - lcov -q -c -d build -b . --no-external -o testCov.info --rc lcov_branch_coverage=1
        - lcov -q -a initialCov.info -a testCov.info -o coverage.info --rc lcov_branch_coverage=1
        - lcov -q -r coverage.info "*test*" -o coverage.info --rc lcov_branch_coverage=1
        - lcov --summary coverage.info --rc lcov_branch_coverage=1
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Build Documentation"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - cmake
            - libgtest-dev
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
      before_install:
        - gem update --system
        - gem install coderay
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DOC=ON
        - make apidoc
        - cd ../doc
        - asciidoctor Main.adoc
      after_failures:
        - tail --lines=2000 build.log

    - env: TEST="Check Code Formatting"
      addons:
        apt:
          packages:
            - clang-format-3.9
      script:
        - res=`find -iname *.cpp -o -iname *.hpp | xargs clang-format-3.9 -output-replacements-xml | grep -c "<replacement "`; if [ $res -ne 0 ]; then echo "Your code does not comply to clang-format"; exit 1; fi
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Documentation Deployment"
      if: branch = master AND type != pull_request
      git:
        depth: false
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - lcov
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
      before_install:
        - gem update --system
        - gem install coderay
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_HARDENING=ON -DBUILD_COVERAGE=ON -DBUILD_DOC=ON
        - make
        - ctest -V
        - make apidoc > apidoc_build.log 2>&1
        - cd ../doc
        - asciidoctor Main.adoc
        - cd ..
      after_script:
        - lcov -q -c -i -d build -b . --no-external -o initialCov.info
        - lcov -q -r initialCov.info "*CMake*CompilerId*" -o initialCov.info
        - lcov -q -c -d build -b . --no-external -o testCov.info --rc lcov_branch_coverage=1
        - lcov -q -a initialCov.info -a testCov.info -o coverage.info --rc lcov_branch_coverage=1
        - lcov -q -r coverage.info "*test*" -o coverage.info --rc lcov_branch_coverage=1
        - lcov --summary coverage.info --rc lcov_branch_coverage=1
        - genhtml -q -t ad_rss_lib --branch-coverage -o coverage coverage.info
        - git checkout -b intermediate
        - mkdir gh-pages
        - mkdir gh-pages/doxygen
        - mkdir gh-pages/documentation
        - mkdir gh-pages/coverage
        - cp -r coverage/* gh-pages/coverage/
        - cp -r build/doc/apidoc/* gh-pages/doxygen
        - cp *.md gh-pages
        - cp -r doc/images gh-pages/documentation/
        - cp doc/Main.html gh-pages/documentation/
        - git add gh-pages/
        - git commit -m "Dummy commit" --no-edit
        - git clean -fd
        - git checkout origin/gh-pages
        - git checkout -b gh-pages
        - git checkout intermediate gh-pages/
        - cp -r gh-pages/* .
        - rm -rf gh-pages/ build/
        - git add .
        - git commit -am "Update documentation" --no-edit
        - git remote add origin-pages https://${GITHUB_TOKEN}@github.com/fabianoboril/ad-rss-lib.git > /dev/null 2>&1
        - git push --set-upstream origin-pages gh-pages
      after_failure:
        - tail --lines=2000 build.log

notifications:
  email: false
