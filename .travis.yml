# ----------------- BEGIN LICENSE BLOCK ---------------------------------
#
# Copyright (c) 2019 Intel Corporation
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
#    OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGE.
#
# ----------------- END LICENSE BLOCK -----------------------------------
##

language: cpp
compiler: gcc

os: linux
dist: xenial
sudo: false

matrix:
  include:

    - env: TEST="Build and Unit Tests (Ubuntu 16.04)"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - lcov
      script:
        - bash .github/.travis/compile.sh release
        - rm -rf build
        - bash .github/.travis/compile.sh debug test
      after_script:
        - bash .github/.travis/code_coverage.sh
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Build and Unit Tests (Ubuntu 14.04)"
      os: linux
      dist: trusty
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
      script:
        - bash .github/.travis/compile.sh release
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Build Documentation"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
      before_install:
        - gem update --system
        - gem install coderay
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DOC=ON
        - make apidoc
        - cd ../doc
        - asciidoctor Main.adoc
      after_failures:
        - tail --lines=2000 build.log

    - env: TEST="Check Code Formatting"
      addons:
        apt:
          packages:
            - clang-format-3.9
      script:
        - res=`find -iname *.cpp -o -iname *.hpp | xargs clang-format-3.9 -output-replacements-xml | grep -c "<replacement "`; if [ $res -ne 0 ]; then echo "Your code does not comply to clang-format"; exit 1; fi
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Static Code Analysis"
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - lcov
            - clang-tidy
            - clang-3.8
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_STATIC_ANALYSIS=ON
        - make clang-tidy
        - if [ -f clangtidy.yml ]; then echo "Static code analysis with clang-tidy failed. Please run 'make clang-tidy'"; exit 1; fi
      after_failure:
        - tail --lines=2000 build.log

    - env: TEST="Documentation Deployment"
      if: branch = master AND type != pull_request
      git:
        depth: false
      addons:
        apt:
          packages:
            - cmake
            - build-essential
            - libgtest-dev
            - lcov
            - doxygen
            - graphviz
            - asciidoctor
            - ruby
            - rubygems
            - ruby-dev
      before_install:
        - gem update --system
        - gem install coderay
      script:
        - mkdir build
        - cd build
        - cmake .. -DBUILD_HARDENING=ON -DBUILD_COVERAGE=ON -DBUILD_DOC=ON -DCMAKE_BUILD_TYPE=Debug
        - make
        - ctest -V
        - make apidoc > apidoc_build.log 2>&1
        - cd ../doc
        - asciidoctor Main.adoc
        - cd ..
      after_script:
        - bash .github/.travis/code_coverage.sh
        - bash .github/.travis/deploy.sh
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 14.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:trusty tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y install build-essential cmake3 libgtest-dev clang"
      script:
        - $SH "mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "apt-get -y remove clang && apt-get -y install clang-3.9"
        - $SH "rm -rf build && export CC=/usr/bin/clang-3.9 && export CXX=/usr/bin/clang++-3.9 && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 16.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:xenial tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y install build-essential cmake libgtest-dev clang"
        - $SH "apt-get -y install software-properties-common && add-apt-repository ppa:ubuntu-toolchain-r/test -y && apt-get update"
      script:
        - $SH "mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "apt-get -y remove clang && apt-get -y install clang-6.0 g++-6 clang-5.0"
        - $SH "rm -rf build && export CC=/usr/bin/gcc-6 && export CXX=/usr/bin/g++-6 && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "rm -rf build && export CC=/usr/bin/clang-5.0 && export CXX=/usr/bin/clang++-5.0 && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        - $SH "rm -rf build && export CC=/usr/bin/clang-6.0 && export CXX=/usr/bin/clang++-6.0 && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
      after_failure:
        - tail --lines=2000 build.log

    - env:
        - "Check Ubuntu 18.04"
        - SH="docker exec -t ubuntu bash -c"
      services:
        - docker
      sudo: true
      before_install:
        - docker run -d --name ubuntu -v $(pwd):/travis -w /travis ubuntu:bionic tail -f /dev/null
        - docker ps
      install:
        - $SH "apt-get update && apt-get -y install build-essential cmake libgtest-dev clang"
      script:
        - $SH "mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
        #- $SH "rm -rf build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && mkdir build && cd build && cmake .. -DBUILD_HARDENING=ON -DCMAKE_BUILD_TYPE=Release && make && ctest"
      after_failure:
        - tail --lines=2000 build.log

notifications:
  email: false
